<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS 精度问题</title>
    <url>/2018/08/05/ac/</url>
    <content><![CDATA[<h3 id="js中进行浮点数运算时容易出现精度问题"><a href="#js中进行浮点数运算时容易出现精度问题" class="headerlink" title="js中进行浮点数运算时容易出现精度问题"></a>js中进行浮点数运算时容易出现精度问题</h3><h4 id="1-除法函数"><a href="#1-除法函数" class="headerlink" title="1 除法函数"></a>1 除法函数</h4><p>//说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。<br>//调用：accDiv(arg1,arg2)<br>//返回值：arg1除以arg2的精确结果 </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> acc<span class="hljs-constructor">Div(<span class="hljs-params">arg1</span>,<span class="hljs-params">arg2</span>)</span>&#123; <br>    var t1=<span class="hljs-number">0</span>,t2=<span class="hljs-number">0</span>,r1,r2; <br>    <span class="hljs-keyword">try</span>&#123;t1=arg1.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;&#125;   <span class="hljs-comment">//--小数点后的长度</span><br>    <span class="hljs-keyword">try</span>&#123;t2=arg2.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;&#125;  <span class="hljs-comment">//--小数点后的长度</span><br>    <span class="hljs-keyword">with</span>(Math)&#123; <br>      r1=<span class="hljs-constructor">Number(<span class="hljs-params">arg1</span>.<span class="hljs-params">toString</span>()</span>.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))  <span class="hljs-comment">//--去除小数点变整数</span><br>      r2=<span class="hljs-constructor">Number(<span class="hljs-params">arg2</span>.<span class="hljs-params">toString</span>()</span>.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))  <span class="hljs-comment">//--去除小数点变整数</span><br>      return (r1/r2)*pow(<span class="hljs-number">10</span>,t2-t1);   <span class="hljs-comment">//---整数相除 在乘上10的平方  小数点的长度</span><br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure>


<h4 id="2-乘法函数"><a href="#2-乘法函数" class="headerlink" title="2 乘法函数"></a>2 乘法函数</h4><p>//说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。<br>//调用：accMul(arg1,arg2)<br>//返回值：arg1乘以arg2的精确结果 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">accMul</span>(<span class="hljs-params">arg1,arg2</span>)</span>&#123; <br>    <span class="hljs-keyword">var</span> m=<span class="hljs-number">0</span>,s1=arg1.toString(),s2=arg2.toString(); <br>    <span class="hljs-keyword">try</span>&#123;m+=s1.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].length&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125; <br>    <span class="hljs-keyword">try</span>&#123;m+=s2.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].length&#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>(s1.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))*<span class="hljs-built_in">Number</span>(s2.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))/<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>,m) <br>&#125; <br></code></pre></td></tr></table></figure>

<h4 id="3-加法函数"><a href="#3-加法函数" class="headerlink" title="3 加法函数"></a>3 加法函数</h4><p>//说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。<br>//调用：accAdd(arg1,arg2)<br>//返回值：arg1加上arg2的精确结果 </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> acc<span class="hljs-constructor">Add(<span class="hljs-params">arg1</span>,<span class="hljs-params">arg2</span>)</span>&#123; <br>    var r1,r2,m; <br>    <span class="hljs-keyword">try</span>&#123;r1=arg1.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;r1=<span class="hljs-number">0</span>&#125; <br>    <span class="hljs-keyword">try</span>&#123;r2=arg2.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;r2=<span class="hljs-number">0</span>&#125; <br>    m=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>pow(<span class="hljs-number">10</span>,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(r1,r2)) <br>    return (arg1*m+arg2*m)/m <br>&#125; <br></code></pre></td></tr></table></figure>

<h4 id="4-减法函数"><a href="#4-减法函数" class="headerlink" title="4 减法函数"></a>4 减法函数</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> acc<span class="hljs-constructor">Sub(<span class="hljs-params">arg1</span>,<span class="hljs-params">arg2</span>)</span>&#123; <br>       var r1,r2,m,n; <br>       <span class="hljs-keyword">try</span>&#123;r1=arg1.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;r1=<span class="hljs-number">0</span>&#125; <br>       <span class="hljs-keyword">try</span>&#123;r2=arg2.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-string">&quot;.&quot;</span>)<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>.length&#125;catch(e)&#123;r2=<span class="hljs-number">0</span>&#125; <br>       m=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>pow(<span class="hljs-number">10</span>,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(r1,r2)); <br>       <span class="hljs-comment">//last modify by deeka </span><br>       <span class="hljs-comment">//动态控制精度长度 </span><br>       n=(r1&gt;=r2)?r1:r2; <br>       return ((arg1*m-arg2*m)/m).<span class="hljs-keyword">to</span><span class="hljs-constructor">Fixed(<span class="hljs-params">n</span>)</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数据结构</title>
    <url>/2020/11/06/dataStructure/</url>
    <content><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>后进先出</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">this</span>.stack = []<br>  &#125;<br>  push(item) &#123;<br>    <span class="hljs-keyword">this</span>.stack.push(item)<br>  &#125;<br>  pop() &#123;<br>    <span class="hljs-keyword">this</span>.stack.pop()<br>  &#125;<br>  peek() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.stack[<span class="hljs-keyword">this</span>.getCount() - <span class="hljs-number">1</span>]<br>  &#125;<br>  getCount() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.stack.length<br>  &#125;<br>  isEmpty() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getCount() === <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先进先出</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">this</span>.queue = []<br>  &#125;<br>  enQueue(item) &#123;<br>    <span class="hljs-keyword">this</span>.queue.push(item)<br>  &#125;<br>  deQueue() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.queue.shift()  <span class="hljs-comment">//使用数组比较消耗性能</span><br>  &#125;<br>  getHeader() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.queue[<span class="hljs-number">0</span>]<br>  &#125;<br>  getLength() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.queue.length<br>  &#125;<br>  isEmpty() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getLength() === <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote>
<p>存贮有序元素的集合,<br>  但是不同于数组,每个元素是一个存贮元素本身的节点和指向下一个元素引用组成<br>  要想访问链表中间的元素,需要从起点开始遍历找到所需元素</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-comment">// 节点</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Node</span> </span>(el) &#123;<br>  <span class="hljs-built_in">this</span>.el = el;<br>  <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Link</span> </span>() &#123;<br>  <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> <span class="hljs-type">Node</span>(<span class="hljs-string">&#x27;head&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 链表结尾追加一个节点</span><br>Link.prototype.append = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(el) &#123;<br>  <span class="hljs-keyword">var</span> currNode = <span class="hljs-built_in">this</span>.head;<br>  <span class="hljs-keyword">while</span> (currNode.next != <span class="hljs-literal">null</span>) &#123;<br>    currNode = currNode.next;<br>  &#125;<br>  currNode.next = <span class="hljs-keyword">new</span> <span class="hljs-type">Node</span>(el);<br>&#125;<br><br><span class="hljs-comment">// 按节点的值查找节点</span><br>Link.prototype.find = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(el) &#123;<br>  <span class="hljs-keyword">var</span> currNode = <span class="hljs-built_in">this</span>.head;<br>  <span class="hljs-keyword">while</span> (currNode &amp;&amp; currNode.el != el) &#123;<br>    currNode = currNode.next;<br>  &#125;<br>  <span class="hljs-keyword">return</span> currNode;<br>&#125;<br><br><span class="hljs-comment">// 插入一个节点</span><br>Link.prototype.insert = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(<span class="hljs-keyword">new</span><span class="hljs-type">El</span>, oldEl) &#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Node</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Node</span>(<span class="hljs-keyword">new</span><span class="hljs-type">El</span>);<br>  <span class="hljs-keyword">var</span> findNode = <span class="hljs-built_in">this</span>.find(oldEl);<br>  <span class="hljs-keyword">if</span> (findNode) &#123;<br>    <span class="hljs-keyword">new</span><span class="hljs-type">Node</span>.next = findNode.next;<br>    findNode.next = <span class="hljs-keyword">new</span><span class="hljs-type">Node</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Error</span>(<span class="hljs-string">&#x27;找不到给定插入的节点&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 展示链表中的元素</span><br>Link.prototype.display = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>() &#123;<br>  <span class="hljs-keyword">var</span> currNode = <span class="hljs-built_in">this</span>.head.next;<br>  <span class="hljs-keyword">while</span> (currNode) &#123;<br>    console.log(currNode.el);<br>    currNode = currNode.next;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 寻找给定节点的前一个节点</span><br>Link.prototype.findPrev = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(el) &#123;<br>  <span class="hljs-keyword">var</span> currNode = <span class="hljs-built_in">this</span>.head;<br>  <span class="hljs-keyword">while</span> (currNode.next &amp;&amp; currNode.next.el !== el) &#123;<br>    currNode = currNode.next;<br>  &#125;<br>  <span class="hljs-keyword">return</span> currNode;<br>&#125;<br><br><span class="hljs-comment">// 删除给定的节点</span><br>Link.prototype.remove = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(el) &#123;<br>  <span class="hljs-keyword">var</span> prevNode = <span class="hljs-built_in">this</span>.findPrev (el);<br>  <span class="hljs-keyword">if</span> (prevNode.next != <span class="hljs-literal">null</span>) &#123;<br>    prevNode.next = prevNode.next.next;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Error</span>(<span class="hljs-string">&#x27;找不到要删除的节点&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote>
<p>类似对象 ，以key，value存贮值</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dictionary</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>() &#123;<br>      <span class="hljs-keyword">this</span>.items = &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span>(key, value) &#123;<br>      <span class="hljs-keyword">this</span>.items[key] = value;<br>    &#125;<br><br>    <span class="hljs-keyword">get</span>(key) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.items[key];<br>    &#125;<br><br>    remove(key) &#123;<br>      delete <span class="hljs-keyword">this</span>.items[key];<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> keys() &#123;<br>      <span class="hljs-keyword">return</span> Object.keys(<span class="hljs-keyword">this</span>.items);<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> values() &#123;<br>       <span class="hljs-keyword">return</span> Object.values(<span class="hljs-keyword">this</span>.items)  <br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><blockquote>
<p>二叉树,树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构</p>
</blockquote>
<blockquote>
<p>二分搜索树,二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。<br>这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。</p>
</blockquote>
<p><img src="/image/tree2.png" alt="tree"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>(value) &#123;<br>    <span class="hljs-keyword">this</span>.value = value<br>    <span class="hljs-keyword">this</span>.left = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">this</span>.right = <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BST</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">this</span>.root = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span><br>  &#125;<br>  getSize() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size<br>  &#125;<br>  isEmpty() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size === <span class="hljs-number">0</span><br>  &#125;<br>  addNode(v) &#123;<br>    <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">this</span>._addChild(<span class="hljs-keyword">this</span>.root, v)<br>  &#125;<br>  <span class="hljs-comment">// 添加节点时，需要比较添加的节点值和当前</span><br>  <span class="hljs-comment">// 节点值的大小</span><br>  _addChild(node, v) &#123;<br>    <span class="hljs-keyword">if</span> (!node) &#123;<br>      <span class="hljs-keyword">this</span>.size++<br>      <span class="hljs-keyword">return</span> new Node(v)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (node.value &gt; v) &#123;<br>      node.left = <span class="hljs-keyword">this</span>._addChild(node.left, v)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.value &lt; v) &#123;<br>      node.right = <span class="hljs-keyword">this</span>._addChild(node.right, v)<br>    &#125;<br>    <span class="hljs-keyword">return</span> node<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>

<p>以上是最基本的二分搜索树实现，接下来实现树的遍历。<br>对于树的遍历来说，有三种遍历方法，分别是先序遍历、中序遍历、后序遍历。三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">// 先序遍历可用于打印树的结构</span><br><span class="hljs-comment">// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。</span><br>pre<span class="hljs-constructor">Traversal()</span> &#123;<br>  this.<span class="hljs-constructor">_pre(<span class="hljs-params">this</span>.<span class="hljs-params">root</span>)</span><br>&#125;<br><span class="hljs-constructor">_pre(<span class="hljs-params">node</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (node) &#123;<br>    console.log(node.value)<br>    this.<span class="hljs-constructor">_pre(<span class="hljs-params">node</span>.<span class="hljs-params">left</span>)</span><br>    this.<span class="hljs-constructor">_pre(<span class="hljs-params">node</span>.<span class="hljs-params">right</span>)</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// 中序遍历可用于排序</span><br><span class="hljs-comment">// 对于 BST 来说，中序遍历可以实现一次遍历就</span><br><span class="hljs-comment">// 得到有序的值</span><br><span class="hljs-comment">// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</span><br>mid<span class="hljs-constructor">Traversal()</span> &#123;<br>  this.<span class="hljs-constructor">_mid(<span class="hljs-params">this</span>.<span class="hljs-params">root</span>)</span><br>&#125;<br><span class="hljs-constructor">_mid(<span class="hljs-params">node</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (node) &#123;<br>    this.<span class="hljs-constructor">_mid(<span class="hljs-params">node</span>.<span class="hljs-params">left</span>)</span><br>    console.log(node.value)<br>    this.<span class="hljs-constructor">_mid(<span class="hljs-params">node</span>.<span class="hljs-params">right</span>)</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// 后序遍历可用于先操作子节点</span><br><span class="hljs-comment">// 再操作父节点的场景</span><br><span class="hljs-comment">// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</span><br>back<span class="hljs-constructor">Traversal()</span> &#123;<br>  this.<span class="hljs-constructor">_back(<span class="hljs-params">this</span>.<span class="hljs-params">root</span>)</span><br>&#125;<br><span class="hljs-constructor">_back(<span class="hljs-params">node</span>)</span> &#123;<br>  <span class="hljs-keyword">if</span> (node) &#123;<br>    this.<span class="hljs-constructor">_back(<span class="hljs-params">node</span>.<span class="hljs-params">left</span>)</span><br>    this.<span class="hljs-constructor">_back(<span class="hljs-params">node</span>.<span class="hljs-params">right</span>)</span><br>    console.log(node.value)<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>

<p>如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><br>getMin() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._getMin(<span class="hljs-keyword">this</span>.root).value<br>&#125;<br>_getMin(node) &#123;<br>  <span class="hljs-keyword">if</span> (!node.left) <span class="hljs-keyword">return</span> node<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._getMin(node.left)<br>&#125;<br>getMax() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._getMax(<span class="hljs-keyword">this</span>.root).value<br>&#125;<br>_getMax(node) &#123;<br>  <span class="hljs-keyword">if</span> (!node.right) <span class="hljs-keyword">return</span> node<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._getMin(node.right)<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>树结构 未完待续…</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><blockquote>
<p>堆通常是一个可以被看做一棵树的数组对象</p>
</blockquote>
<blockquote>
<p>堆的实现通过构造二叉堆，实为二叉树的一种。这种数据结构具有以下性质。<br>  任意节点小于（或大于）它的所有子节点<br>  堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxHeap</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>() &#123;<br>    <span class="hljs-keyword">this</span>.heap = []<br>  &#125;<br>  size() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.heap.length<br>  &#125;<br>  empty() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size() == <span class="hljs-number">0</span><br>  &#125;<br>  add(item) &#123;<br>    <span class="hljs-keyword">this</span>.heap.push(item)<br>    <span class="hljs-keyword">this</span>._shiftUp(<span class="hljs-keyword">this</span>.size() - <span class="hljs-number">1</span>)<br>  &#125;<br>  removeMax() &#123;<br>    <span class="hljs-keyword">this</span>._shiftDown(<span class="hljs-number">0</span>)<br>  &#125;<br>  getParentIndex(k) &#123;<br>    <span class="hljs-keyword">return</span> parseInt((k - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)<br>  &#125;<br>  getLeftIndex(k) &#123;<br>    <span class="hljs-keyword">return</span> k * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>  &#125;<br>  _shiftUp(k) &#123;<br>    <span class="hljs-comment">// 如果当前节点比父节点大，就交换</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.heap[k] &gt; <span class="hljs-keyword">this</span>.heap[<span class="hljs-keyword">this</span>.getParentIndex(k)]) &#123;<br>      <span class="hljs-keyword">this</span>._swap(k, <span class="hljs-keyword">this</span>.getParentIndex(k))<br>      <span class="hljs-comment">// 将索引变成父节点</span><br>      k = <span class="hljs-keyword">this</span>.getParentIndex(k)<br>    &#125;<br>  &#125;<br>  _shiftDown(k) &#123;<br>    <span class="hljs-comment">// 交换首位并删除末尾</span><br>    <span class="hljs-keyword">this</span>._swap(k, <span class="hljs-keyword">this</span>.size() - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">this</span>.heap.splice(<span class="hljs-keyword">this</span>.size() - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 判断节点是否有左孩子，因为二叉堆的特性，有右必有左</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.getLeftIndex(k) &lt; <span class="hljs-keyword">this</span>.size()) &#123;<br>      let j = <span class="hljs-keyword">this</span>.getLeftIndex(k)<br>      <span class="hljs-comment">// 判断是否有右孩子，并且右孩子是否大于左孩子</span><br>      <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; <span class="hljs-keyword">this</span>.size() &amp;&amp; <span class="hljs-keyword">this</span>.heap[j + <span class="hljs-number">1</span>] &gt; <span class="hljs-keyword">this</span>.heap[j]) j++<br>      <span class="hljs-comment">// 判断父节点是否已经比子节点都大</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.heap[k] &gt;= <span class="hljs-keyword">this</span>.heap[j]) <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">this</span>._swap(k, j)<br>      k = j<br>    &#125;<br>  &#125;<br>  _swap(left, right) &#123;<br>    let rightValue = <span class="hljs-keyword">this</span>.heap[right]<br>    <span class="hljs-keyword">this</span>.heap[right] = <span class="hljs-keyword">this</span>.heap[left]<br>    <span class="hljs-keyword">this</span>.heap[left] = rightValue<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT 操作</title>
    <url>/2019/08/09/git/</url>
    <content><![CDATA[<h4 id="git流程图"><a href="#git流程图" class="headerlink" title="git流程图"></a>git流程图</h4><p><img src="/image/640.png" alt="avatar"></p>
<ul>
<li>Workspace 工作区</li>
<li>Staging/Index：暂存区</li>
<li>Local Repository：本地仓库（可修改）</li>
<li>/refs/remotes：远程仓库的引用（不可修改）</li>
<li>Remote：远程仓库</li>
</ul>
<h4 id="git简单命令659"><a href="#git简单命令659" class="headerlink" title="git简单命令659"></a>git简单命令659</h4><figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><br><span class="hljs-meta"># 在当前目录新建一个git仓库</span><br>git init<br><br><span class="hljs-meta"># 打开git仓库图形界面</span><br>gitk<br><br><span class="hljs-meta"># 显示所有变更信息</span><br>git status<br><br><span class="hljs-meta"># 删除所有Untracked files</span><br>git clean -fd<br><br><span class="hljs-meta"># 下载远程仓库的所有更新</span><br>git fetch remote<br><br><span class="hljs-meta"># 下载远程仓库的所有更新，并且Merge</span><br>git pull romote branch-name<br><br><br><span class="hljs-meta"># 查看上次commit id</span><br>git rev-parse HEAD <br><br><span class="hljs-meta"># 将指定分支合并到当前分支</span><br>git merge branch-name<br><br><span class="hljs-meta"># 将最近的一次commit打包到patch文件中</span><br>git format-patch HEAD^ <br><br><span class="hljs-meta"># 将patch文件 添加到本地仓库</span><br>git am  patch-file<br><br><span class="hljs-meta"># 查看指定文件修改历史</span><br>git blame file-name<br><br></code></pre></td></tr></table></figure>

<ul>
<li>git clone</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><br><span class="hljs-comment"># 将远程git仓库克隆到本地</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">url</span><br><br><span class="hljs-comment"># 将远程git仓库克隆到本地</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> branch url <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git stash</li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><br><span class="hljs-meta"># 将修改过，未add到Staging区的文件，暂时存储起来</span><br>git stash<br><br><span class="hljs-meta"># 恢复之前stash存储的内容</span><br>git stash apply<br><br><span class="hljs-meta"># 保存stash 并写message</span><br>git stash save <span class="hljs-string">&quot;stash test&quot;</span><br><br><span class="hljs-meta"># 查看stash了哪些存储</span><br>git stash list<br><br><span class="hljs-meta"># 将stash@&#123;1&#125;存储的内容还原到工作区</span><br>git stash apply stash@&#123;<span class="hljs-number">1</span>&#125;<br><br><span class="hljs-meta"># 删除stash@&#123;1&#125;存储的内容</span><br>git stash drop stash@&#123;<span class="hljs-number">1</span>&#125;<br><br><span class="hljs-meta"># 删除所有缓存的stash</span><br>git stash clear<br><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git config</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment"># 配置git图形界面编码为utf-8</span><br>git<span class="hljs-built_in"> config </span>--global gui.<span class="hljs-attribute">encoding</span>=utf-8 <br><br><span class="hljs-comment"># 设置全局提交代码的用户名 </span><br>git<span class="hljs-built_in"> config </span>--global user.name name  <br><br><span class="hljs-comment"># 设置全局提交代码时的邮箱</span><br>git<span class="hljs-built_in"> config </span>--global user.email email<br><br><span class="hljs-comment"># 设置当前项目提交代码的用户名 </span><br>git<span class="hljs-built_in"> config </span>user.name name  <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git remote</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><br><span class="hljs-comment"># 显示所有远程仓库</span><br><span class="hljs-attr">git</span> <span class="hljs-string">remote -v  </span><br><br><span class="hljs-comment">#  增加一个新的远程仓库</span><br><span class="hljs-attr">git</span> <span class="hljs-string">remote add name url </span><br><br><span class="hljs-comment">#  删除指定远程仓库</span><br><span class="hljs-attr">git</span> <span class="hljs-string">remote remove name</span><br><br><span class="hljs-comment"># 获取指定远程仓库的详细信息</span><br><span class="hljs-attr">git</span> <span class="hljs-string">remote show origin</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git add</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><br><span class="hljs-comment"># 添加所有的修改到Staging区</span><br>git <span class="hljs-keyword">add</span><span class="bash"> .</span><br>git <span class="hljs-keyword">add</span><span class="bash"> --all  </span><br><br><span class="hljs-comment"># 添加指定文件到Staging区</span><br>git <span class="hljs-keyword">add</span><span class="bash"> file   </span><br><br><span class="hljs-comment"># 添加多个修改的文件到Staging区</span><br>git <span class="hljs-keyword">add</span><span class="bash"> file1 file2   </span><br><br><span class="hljs-comment"># 添加修改的目录到Staging区</span><br>git <span class="hljs-keyword">add</span><span class="bash"> dir</span><br><br><span class="hljs-comment"># 添加所有src目录下main开头的所有文件到Staging区    </span><br>git <span class="hljs-keyword">add</span><span class="bash"> src/main* </span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git commit</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-comment"># 提交Staging区的代码到本地仓库区</span><br>git commit -m <span class="hljs-string">&quot;message&quot;</span>  <br><br><span class="hljs-comment"># 提交Staging中在指定文件到本地仓库区</span><br>git commit file1 file2 -m <span class="hljs-string">&quot;message&quot;</span>  <br><br><span class="hljs-comment"># 使用新的一次commit，来覆盖上一次commit</span><br>git commit <span class="hljs-params">--amend</span> -m <span class="hljs-string">&quot;message&quot;</span> <br><br><span class="hljs-comment"># 修改上次提交的用户名和邮箱</span><br>git commit <span class="hljs-params">--amend</span> <span class="hljs-params">--author=</span><span class="hljs-string">&quot;name &lt;email&gt;&quot;</span> <span class="hljs-params">--no-edit</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git branch</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><br><span class="hljs-comment"># 列出本地所有分支</span><br>git <span class="hljs-keyword">branch </span>  <br><br><span class="hljs-comment"># 列出本地所有分支 并显示最后一次提交的哈希值</span><br>git <span class="hljs-keyword">branch </span>-v<br><br><span class="hljs-comment"># 在-v 的基础上 并且显示上游分支的名字</span><br>git <span class="hljs-keyword">branch </span>-vv<br><br><span class="hljs-comment"># 列出上游所有分支</span><br>git <span class="hljs-keyword">branch </span>-r  <br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>git <span class="hljs-keyword">branch </span><span class="hljs-keyword">branch-name </span> <br><br><span class="hljs-comment"># 删除分支</span><br>git <span class="hljs-keyword">branch </span>-d <span class="hljs-keyword">branch-name </span>  <br><br><span class="hljs-comment"># 设置分支上游</span><br>git <span class="hljs-keyword">branch </span>--set-upstream-to <span class="hljs-keyword">origin/master</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"># </span>本地分支重命名<br>git <span class="hljs-keyword">branch </span>-m old-<span class="hljs-keyword">branch </span>new-<span class="hljs-keyword">branch</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure>

<ul>
<li>git checkout</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><br><span class="hljs-comment"># 创建本地分支并关联远程分支</span><br>git checkout -<span class="hljs-keyword">b </span>local-<span class="hljs-keyword">branch </span><span class="hljs-keyword">origin/remote-branch</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"># </span>新建一个分支，且切换到新分支<br>git checkout -<span class="hljs-keyword">b </span><span class="hljs-keyword">branch-name</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"># </span>切换到另一个分支<br>git checkout <span class="hljs-keyword">branch-name </span> <br><br><span class="hljs-comment"># 撤销工作区文件的修改，跟上次Commit一样</span><br>git checkout commit-file <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git tag</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><br><span class="hljs-comment"># 创建带有说明的标签</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-a</span> v1.<span class="hljs-number">4</span> -m &#x27;my <span class="hljs-keyword">version</span> <span class="hljs-number">1.4</span>&#x27;<br><br><span class="hljs-comment">#  打标签</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">tag-name</span><br><br><span class="hljs-comment"># 查看所有标签</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title"># 给指定commit</span>打标签<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">tag-name</span> commit-id<br><br><span class="hljs-comment"># 删除标签</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> <span class="hljs-keyword">tag</span>-name <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git push</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><br><span class="hljs-meta"># 删除远程分支</span><br>git <span class="hljs-keyword">push</span> origin :master   <br><br><span class="hljs-meta">#  删除远程标签</span><br>git <span class="hljs-keyword">push</span> origin --<span class="hljs-keyword">delete</span> tag tag-name<br><br><span class="hljs-meta"># 上传本地仓库到远程分支</span><br>git <span class="hljs-keyword">push</span> remote branch-name<br><br><span class="hljs-meta"># 强行推送当前分支到远程分支</span><br>git <span class="hljs-keyword">push</span> remote branch-name --force<br><br><span class="hljs-meta"># 推送所有分支到远程仓库</span><br>git <span class="hljs-keyword">push</span> remote --all  <br><br><span class="hljs-meta"># 推送所有标签</span><br>git <span class="hljs-keyword">push</span> --tags<br><br><span class="hljs-meta"># 推送指定标签</span><br>git <span class="hljs-keyword">push</span> origin tag-name<br><br><span class="hljs-meta">#  删除远程标签（需要先删除本地标签）</span><br>git <span class="hljs-keyword">push</span> origin :refs/tags/tag-name  <br><br><span class="hljs-meta"># 将本地dev分支push到远程master分支</span><br>git <span class="hljs-keyword">push</span> origin dev:master<br><br></code></pre></td></tr></table></figure>

<ul>
<li>git reset </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment"># 将未commit的文件移出Staging区</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-keyword">HEAD</span><br><br><span class="hljs-comment"># 重置Staging区与上次commit的一样</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard  </span><br><br><span class="hljs-comment"># 重置Commit代码和远程分支代码一样</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard origin/master</span><br><br><span class="hljs-comment"># 回退到上个commit</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span><br><br><span class="hljs-comment"># 回退到前3次提交之前，以此类推，回退到n次提交之前</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~3</span><br><br>回退到指定<span class="hljs-keyword">commit</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard commit-id   </span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git diff</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><br><span class="hljs-comment"># 查看文件在工作区和暂存区区别</span><br>git diff <span class="hljs-built_in">file</span>-<span class="hljs-built_in">name</span><br><br><span class="hljs-comment"># 查看暂存区和本地仓库区别</span><br>git diff <span class="hljs-comment">--cached  file-name</span><br><br><span class="hljs-comment"># 查看文件和另一个分支的区别</span><br>git diff branch-<span class="hljs-built_in">name</span> <span class="hljs-built_in">file</span>-<span class="hljs-built_in">name</span><br><br><span class="hljs-comment"># 查看两次提交的区别</span><br>git diff commit-<span class="hljs-built_in">id</span> commit-<span class="hljs-built_in">id</span>  <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git show</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment"># 查看指定标签的提交信息</span><br>git <span class="hljs-keyword">show</span> tag-<span class="hljs-keyword">name</span><br><br><span class="hljs-comment"># 查看具体的某次改动</span><br>git <span class="hljs-keyword">show</span> <span class="hljs-keyword">commit</span>-<span class="hljs-keyword">id</span> <br><br></code></pre></td></tr></table></figure>

<ul>
<li>git rebase</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><br># 将指定分支合并到当前分支<br>git rebase branch-<span class="hljs-type">name</span><br><br># 执行<span class="hljs-keyword">commit</span> id 将rebase 停留在指定<span class="hljs-keyword">commit</span> 处<br>git rebase -i <span class="hljs-keyword">commit</span>-id<br><br># 执行<span class="hljs-keyword">commit</span> id 将rebase 停留在 项目首次<span class="hljs-keyword">commit</span>处<br>git rebase -i <span class="hljs-comment">--root</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git restore</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment"># 恢复第一次add 的文件，同 git rm --cached</span><br>git <span class="hljs-keyword">restore</span> <span class="hljs-comment">--staged file</span><br><br><span class="hljs-comment"># 移除staging区的文件，同 git checkout</span><br>git <span class="hljs-keyword">restore</span> <span class="hljs-keyword">file</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git revert</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><br><span class="hljs-comment"># 撤销前一次commit</span><br><span class="hljs-attr">git</span> <span class="hljs-string">revert HEAD</span><br><br><span class="hljs-comment"># 撤销前前一次commit</span><br><span class="hljs-attr">git</span> <span class="hljs-string">revert HEAD^</span><br><br><span class="hljs-comment"># 撤销指定某次commit</span><br><span class="hljs-attr">git</span> <span class="hljs-string">revert commit-id</span><br><br></code></pre></td></tr></table></figure>

<h4 id="git-特殊情况操作"><a href="#git-特殊情况操作" class="headerlink" title="git 特殊情况操作"></a>git 特殊情况操作</h4><ul>
<li>代码没完成切换分支</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><br><span class="hljs-comment"># 暂存未提交的代码</span><br><span class="hljs-attr">git</span> <span class="hljs-string">stash</span><br><br><span class="hljs-comment"># 还原暂存的代码</span><br><span class="hljs-attr">git</span> <span class="hljs-string">stash apply</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>本地临时代码不想提交，一次性清空</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><br># 还原未<span class="hljs-keyword">commit</span>的本地更改的代码<br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span><br><br># 还原包含<span class="hljs-keyword">commit</span>的代码，到跟远程分支相同<br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard origin/master</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>已经提交的代码，不需要了</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment"># 还原到上次commit</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD^</span><br><br><span class="hljs-comment"># 还原到当前之前的几次commit</span><br>git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD~2</span><br><br><span class="hljs-comment"># 强制推送到远程分支，确保没有其他人在push，不然可能会丢失代码</span><br>git push origin develop <span class="hljs-comment">--force</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>git reset –hard 命令，执行错误</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><br><span class="hljs-comment"># 误操作</span><br><span class="hljs-attribute">git</span> reset --hard <span class="hljs-number">8529</span>cb<span class="hljs-number">7</span><br><br><span class="hljs-comment"># 执行</span><br><span class="hljs-attribute">git</span> reflog<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 设计模式</title>
    <url>/2019/05/05/design/</url>
    <content><![CDATA[<h3 id="js设计模式"><a href="#js设计模式" class="headerlink" title="js设计模式"></a>js设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><blockquote>
<p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>核心：确保只有一个实例，并提供全局访问</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">假设要设置一个管理员，多次调用也仅设置一次，我们可以使用闭包缓存一个内部变量来实现这个单例<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetManager</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.manager = name;<br>&#125;<br><br>SetManager.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.manager);<br>&#125;;<br><br><span class="hljs-keyword">var</span> SingletonSetManager = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> manager = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!manager) &#123;<br>            manager = <span class="hljs-keyword">new</span> SetManager(name);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> manager;<br>    &#125; <br>&#125;)();<br><br>SingletonSetManager(<span class="hljs-string">&#x27;a&#x27;</span>).getName(); <span class="hljs-comment">// a</span><br>SingletonSetManager(<span class="hljs-string">&#x27;b&#x27;</span>).getName(); <span class="hljs-comment">// a</span><br>SingletonSetManager(<span class="hljs-string">&#x27;c&#x27;</span>).getName(); <span class="hljs-comment">// a</span><br><br></code></pre></td></tr></table></figure>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote>
<p>定义：一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。<br>核心：将算法的使用和算法的实现分离开来。<br>一个基于策略模式的程序至少由两部分组成：<br>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。<br>第二个部分是环境类Context，Context接受客户的请求，随后把请求委托给某一个策略类。要做到这点，说明Context 中要维持对某个策略对象的引用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">策略模式可以用于组合一系列算法，也可用于组合一系列业务规则<br><br><span class="hljs-comment">// 加权映射关系</span><br><span class="hljs-keyword">var</span> levelMap = &#123;<br>    S: <span class="hljs-number">10</span>,<br>    A: <span class="hljs-number">8</span>,<br>    B: <span class="hljs-number">6</span>,<br>    C: <span class="hljs-number">4</span><br>&#125;;<br><br><span class="hljs-comment">// 组策略</span><br><span class="hljs-keyword">var</span> scoreLevel = &#123;<br>    basicScore: <span class="hljs-number">80</span>,<br><br>    S: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.basicScore + levelMap[<span class="hljs-string">&#x27;S&#x27;</span>]; <br>    &#125;,<br><br>    A: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.basicScore + levelMap[<span class="hljs-string">&#x27;A&#x27;</span>]; <br>    &#125;,<br><br>    B: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.basicScore + levelMap[<span class="hljs-string">&#x27;B&#x27;</span>]; <br>    &#125;,<br><br>    C: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.basicScore + levelMap[<span class="hljs-string">&#x27;C&#x27;</span>]; <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScore</span>(<span class="hljs-params">level</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> scoreLevel[level] ? scoreLevel[level]() : <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<br>    getScore(<span class="hljs-string">&#x27;S&#x27;</span>),<br>    getScore(<span class="hljs-string">&#x27;A&#x27;</span>),<br>    getScore(<span class="hljs-string">&#x27;B&#x27;</span>),<br>    getScore(<span class="hljs-string">&#x27;C&#x27;</span>),<br>    getScore(<span class="hljs-string">&#x27;D&#x27;</span>)<br>); <span class="hljs-comment">// 90 88 86 84 0</span><br><br></code></pre></td></tr></table></figure>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote>
<p>定义：为一个对象提供一个代用品或占位符，以便控制对它的访问<br>核心：当客户不方便直接访问一个 对象或者不满足需要的时候，提供一个替身对象 来控制对这个对象的访问，客户实际上访问的是 替身对象。<br>替身对象对请求做出一些处理之后， 再把请求转交给本体对象<br>代理和本体的接口具有一致性，本体定义了关键功能，而代理是提供或拒绝对它的访问，或者在访问本体之前做一 些额外的事情</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">代理模式主要有三种：保护代理、虚拟代理、缓存代理<br>保护代理主要实现了访问主体的限制行为，以过滤字符作为简单的例子<br><br><span class="hljs-comment">// 主体，发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendMsg</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(msg);<br>&#125;<br><br><span class="hljs-comment">// 代理，对消息进行过滤</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxySendMsg</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-comment">// 无消息则直接返回</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;deny&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 有消息则进行过滤</span><br>    msg = (<span class="hljs-string">&#x27;&#x27;</span> + msg).replace(<span class="hljs-regexp">/泥\s*煤/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    sendMsg(msg);<br>&#125;<br><br><br>sendMsg(<span class="hljs-string">&#x27;泥煤呀泥 煤呀&#x27;</span>); <span class="hljs-comment">// 泥煤呀泥 煤呀</span><br>proxySendMsg(<span class="hljs-string">&#x27;泥煤呀泥 煤&#x27;</span>); <span class="hljs-comment">// 呀</span><br>proxySendMsg(); <span class="hljs-comment">// deny</span><br></code></pre></td></tr></table></figure>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote>
<p>定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。<br>核心：在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">JS中数组的map <span class="hljs-keyword">forEach</span> 已经内置了迭代器<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(item, <span class="hljs-keyword">index</span>, arr) &#123;<br>    console.log(item, <span class="hljs-keyword">index</span>, arr);<br>&#125;);<br></code></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">each</span>(obj, cb) &#123;<br>    var <span class="hljs-keyword">value</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">Array</span>.isArray(obj)) &#123;<br>        <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; obj.length; ++i) &#123;<br>            <span class="hljs-keyword">value</span> = cb.<span class="hljs-keyword">call</span>(obj[i], i, obj[i]);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> === <span class="hljs-keyword">false</span>) &#123;<br>                break;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (var i <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">value</span> = cb.<span class="hljs-keyword">call</span>(obj[i], i, obj[i]);<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> === <span class="hljs-keyword">false</span>) &#123;<br>                break;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">each</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-keyword">function</span>(<span class="hljs-keyword">index</span>, <span class="hljs-keyword">value</span>) &#123;<br>    console.log(<span class="hljs-keyword">index</span>, <span class="hljs-keyword">value</span>);<br>&#125;);<br><br><span class="hljs-keyword">each</span>(&#123;a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-keyword">index</span>, <span class="hljs-keyword">value</span>) &#123;<br>    console.log(<span class="hljs-keyword">index</span>, <span class="hljs-keyword">value</span>);<br>&#125;);<br><br>// <span class="hljs-number">0</span> <span class="hljs-number">1</span><br>// <span class="hljs-number">1</span> <span class="hljs-number">2</span><br>// <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><br>// a <span class="hljs-number">1</span><br>// b <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h3><blockquote>
<p>定义：也称作观察者模式，定义了对象间的一种一对多的依赖关系，当一个对象的状态发 生改变时，所有依赖于它的对象都将得到通知<br>核心：取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。<br>与传统的发布-订阅模式实现方式（将订阅者自身当成引用传入发布者）不同，在JS中通常使用注册回调函数的形式来订阅</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">JS中的事件就是经典的发布-订阅模式的实现<br><br><span class="hljs-comment">// 订阅</span><br><span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click1&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br><br><span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click2&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 发布</span><br><span class="hljs-built_in">document</span>.body.click(); <span class="hljs-comment">// click1  click2</span><br></code></pre></td></tr></table></figure>

<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><blockquote>
<p>定义：用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系<br>命令（command）指的是一个执行某些特定事情的指令<br>核心：命令中带有execute执行、undo撤销、redo重做等相关命令方法，建议显示地指示这些方法名</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 堆栈解析</title>
    <url>/2020/11/07/heapStack/</url>
    <content><![CDATA[<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><blockquote>
<p>堆栈是一个计算机专用术语，在数据结构里它代表着两种数据的操作方式，在内存维度里代表着两种不同的缓存方式和分配。</p>
</blockquote>
<h4 id="数据结构中的堆栈"><a href="#数据结构中的堆栈" class="headerlink" title="数据结构中的堆栈"></a>数据结构中的堆栈</h4><blockquote>
<p>栈(stack)： 其数据的存取方式是先进后出，<br>举个例子，js中的全局下文栈在运行时是第一个进(push)栈的，在浏览器关闭时成为最后一个出(pop)栈的。其他的函数上下文也是存储在栈中，但是一般都是即进（函数创建）即出（函数执行完毕）的.</p>
</blockquote>
<blockquote>
<p>堆（heap）： 一种经过排序的树形结构(完全二叉树)，通常用来实现优先队列，有小顶堆和大顶堆两种</p>
</blockquote>
<h4 id="存储空间中的堆栈（上下文与深浅拷贝）"><a href="#存储空间中的堆栈（上下文与深浅拷贝）" class="headerlink" title="存储空间中的堆栈（上下文与深浅拷贝）"></a>存储空间中的堆栈（上下文与深浅拷贝）</h4><blockquote>
<p>栈区（栈内存）<br>  首先可以确定的是基本类型都存放在栈区，所以当你在拷贝一个值给另一个变量时，传递的是一个单纯的值，不会再产生任何指向运算。<br>  而当你在声明一个引用类型时，该变量所在的房间里存放的数据实际是一个地址值，该地址指向了内存中的另一块区域——堆区。</p>
</blockquote>
<blockquote>
<p>堆区（堆内存）<br>  当引用类型被浅拷贝时，因为所分配的数据空间是同一块，位于堆中的某一个位置。所以浅拷贝的数据值被所引用的引用类型变量所共同使用，一发则同全身。<br>  而被深拷贝的时候，会根据执行重新分配一块新的内存空间，两个栈上的引用类型的变量指向运算后会指向堆中不同的地址空间。<br>  这样，在我们想要深拷贝的场景中，我们对引用类型拷贝时就不能使用直接赋值这种方式了，而是要重新分配一块空间给被拷贝值。<br>  举个最简单的例子：<br>  function deepCopy(obj) { return JSON.parse(JSON.stringify(obj)); } // 最常用场景使用</p>
</blockquote>
<h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><blockquote>
<p>what？<br>  在某种场景下，对于分配的空间失去控制或者忘记释放，这些空间就属于泄漏掉的内存，在一些严重的递归或者是定时器场景中，内存泄漏会使浏览器内存占用越来越高，影响性能。<br>  why？<br>  为什么会产生内存泄漏，因为那部分空间不能被垃圾回收机制所回收。<br>  release:<br>  将该变量的引用赋值为null或者是将dom对象移除，在被多个对象引用时则都要处理才会释放空间。</p>
</blockquote>
<blockquote>
<p>要去优化内存的时候，不用一定要记什么dom引用js对象，js引用dom对象，或者是计时器对象未被清除，闭包产生泄漏什么的，只需要理解标记清除的原理去分析就可以了，<br>  全局变量全部被标记为window引用，局部随着所在函数上下文出栈而失去引用被即刻释放，如果局部返回一个对象使仍然访问到局部中的某些变量，则这些变量就没有失去引用，自然就会继续占据内存空间。<br>  随着一些场景中对这些返回的对象的需求结束，那么我们就需要释放这些被绑在全局上的对象，则那些被对象所引用的变量的空间也会因为失去引用而被清除标记，随后在浏览器的gc中被回收。</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP and HTTPS 总结</title>
    <url>/2019/12/13/http/</url>
    <content><![CDATA[<h3 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h3><h5 id="HTTP和HTTPS的基本概念"><a href="#HTTP和HTTPS的基本概念" class="headerlink" title="HTTP和HTTPS的基本概念"></a>HTTP和HTTPS的基本概念</h5><p>  HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>
<p>  HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<h5 id="HTTPS和HTTP的区别主要如下"><a href="#HTTPS和HTTP的区别主要如下" class="headerlink" title="HTTPS和HTTP的区别主要如下"></a>HTTPS和HTTP的区别主要如下</h5><p>  1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>
<p>  2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>
<p>  3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
<p>  4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>
<h5 id="客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤"><a href="#客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤" class="headerlink" title="客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤"></a>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤</h5><p>  （1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p>
<p>  （2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p>
<p>  （3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p>
<p>  （4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p>
<p>  （5）Web服务器利用自己的私钥解密出会话密钥。</p>
<p>  （6）Web服务器利用会话密钥加密与客户端之间的通信。</p>
<h5 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h5><p>  （1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>
<p>  （2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>
<p>  （3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>
<p>  （4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p>
<h5 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h5><p>  （1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p>
<p>  （2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p>
<p>  （3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p>
<p>   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p>
<p>  （5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 宏任务和微任务</title>
    <url>/2018/11/09/javascript/</url>
    <content><![CDATA[<p>宏任务（macrotask ）和微任务（microtask ）</p>
<p>macrotask 和 microtask 表示异步任务的两种分类</p>
<p>在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，<br>首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，<br>执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，<br>周而复始，直至两个队列的任务都取完。</p>
<p><img src="/image/650.png" alt="avatar"></p>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><table>
<thead>
<tr>
<th align="left">#</th>
<th>浏览器</th>
<th>Node</th>
</tr>
</thead>
<tbody><tr>
<td align="left">I/O</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left">setTimeout</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left">setInterval</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td align="left">setImmediate</td>
<td>x</td>
<td>√</td>
</tr>
<tr>
<td align="left">requestAnimationFrame</td>
<td>√</td>
<td>x</td>
</tr>
</tbody></table>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><table>
<thead>
<tr>
<th align="left">#</th>
<th>浏览器</th>
<th>Node</th>
</tr>
</thead>
<tbody><tr>
<td align="left">process.nextTick</td>
<td>x</td>
<td>√</td>
</tr>
<tr>
<td align="left">MutationObserver</td>
<td>√</td>
<td>x</td>
</tr>
<tr>
<td align="left">Promise.then catch finally</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span>执行后 回调一个宏事件<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;内层宏事件3&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;外层宏事件1&#x27;</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;外层宏事件2&#x27;</span>);<br>    resolve()<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;微事件1&#x27;</span>);<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;微事件2&#x27;</span>)<br>&#125;)<br><br><br></code></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>外层宏事件1</li>
<li>外层宏事件2</li>
<li>微事件1</li>
<li>微事件2</li>
<li>内层宏事件3</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//主线程直接执行</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-comment">//丢到宏事件队列中</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>);<br>    process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4&#x27;</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5&#x27;</span>)<br>    &#125;)<br>&#125;)<br><span class="hljs-comment">//微事件1</span><br>process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6&#x27;</span>);<br>&#125;)<br><span class="hljs-comment">//主线程直接执行</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7&#x27;</span>);<br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//微事件2</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//丢到宏事件队列中</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;9&#x27;</span>);<br>    process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;10&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;11&#x27;</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;12&#x27;</span>)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>• 首先浏览器执行js进入第一个宏任务进入主线程, 直接打印console.log(‘1’)</p>
<p>• 遇到 setTimeout  分发到宏任务Event Queue中</p>
<p>• 遇到 process.nextTick 丢到微任务Event Queue中</p>
<p>• 遇到 Promise， new Promise 直接执行 输出 console.log(‘7’);</p>
<p>• 执行then 被分发到微任务Event Queue中</p>
<p>•第一轮宏任务执行结束，开始执行微任务 打印 6,8</p>
<p>•第一轮微任务执行完毕，执行第二轮宏事件，执行setTimeout</p>
<p>•先执行主线程宏任务，在执行微任务，打印’2,4,3,5’</p>
<p>•在执行第二个setTimeout,同理打印 ‘9,11,10,12’</p>
<p>•整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 手写代码</title>
    <url>/2020/07/22/jsCon/</url>
    <content><![CDATA[<h3 id="手写代码实现"><a href="#手写代码实现" class="headerlink" title="手写代码实现"></a>手写代码实现</h3><h4 id="实现map"><a href="#实现map" class="headerlink" title="实现map"></a>实现map</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.map = <span class="hljs-built_in">Array</span>.prototype.map || <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, m = <span class="hljs-built_in">this</span>.length, res = [], tmp; i &lt; m; i++) &#123;<br>    tmp = <span class="hljs-built_in">this</span>[i];<br>    res.push(fn.call(tmp, tmp, i, <span class="hljs-built_in">this</span>));<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="实现new"><a href="#实现new" class="headerlink" title="实现new"></a>实现new</h4><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">New</span><span class="hljs-params">(func)</span> &#123;</span><br>  var <span class="hljs-keyword">res</span> = &#123;&#125;<br>  <span class="hljs-keyword">if</span>(func.prototype !== null) &#123;<br>    <span class="hljs-keyword">res</span>.__proto__ = func.prototype<br>  &#125;<br>  var <span class="hljs-keyword">ret</span> = func.apply(<span class="hljs-keyword">res</span>, Array.prototype.slice.<span class="hljs-keyword">call</span>(arguments, <span class="hljs-number">1</span>))<br>  <span class="hljs-keyword">if</span>(typeof <span class="hljs-keyword">ret</span> === <span class="hljs-string">&#x27;object&#x27;</span> || (typeof <span class="hljs-keyword">ret</span> === <span class="hljs-string">&#x27;function&#x27;</span> || <span class="hljs-keyword">ret</span> !== null) <span class="hljs-keyword">return</span> <span class="hljs-keyword">ret</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h4 id="实现promise"><a href="#实现promise" class="headerlink" title="实现promise"></a>实现promise</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">function</span> <span class="hljs-built_in">Promise</span>（exector）&#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-literal">that</span> = <span class="hljs-built_in">this</span><br>  <span class="hljs-keyword">let</span> status = <span class="hljs-string">&#x27;pending&#x27;</span><br>  <span class="hljs-keyword">let</span> value = <span class="hljs-literal">undefined</span><br>  <span class="hljs-keyword">let</span> reason = undefind<br>  <span class="hljs-keyword">function</span> resolve(value) &#123;<br>    <span class="hljs-keyword">if</span>(status == <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>      <span class="hljs-literal">that</span>.value = value<br>      <span class="hljs-literal">that</span>.status = <span class="hljs-string">&#x27;onFullfiled&#x27;</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> reject(reason) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">that</span>.value == <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>      <span class="hljs-literal">that</span>.reason = reason<br>      <span class="hljs-literal">that</span>.status = <span class="hljs-string">&#x27;onRegected&#x27;</span><br>    &#125;<br>  &#125; <br>&#125; <br><br><span class="hljs-built_in">Promise</span>.prototype.<span class="hljs-keyword">then</span> = <span class="hljs-keyword">function</span>(resolve,reject) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-literal">that</span> = <span class="hljs-built_in">this</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-literal">that</span>.status == <span class="hljs-string">&#x27;onFullfiled&#x27;</span>) resolve(value)<br>  <span class="hljs-keyword">if</span>(<span class="hljs-literal">that</span>.status == <span class="hljs-string">&#x27;onRegected&#x27;</span>) reject(value)<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="实现instanceOf"><a href="#实现instanceOf" class="headerlink" title="实现instanceOf"></a>实现instanceOf</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">instanceOf</span>(<span class="hljs-params">left, right</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> proto = left.__proto__<br>  <span class="hljs-keyword">let</span> prototype = right.prototype<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(proto == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span>(prototype == proto) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    proto = proto.__proto__<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h4><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> objClone = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">obj</span>)</span>?<span class="hljs-literal">[]</span>:&#123;&#125;<br>  <span class="hljs-keyword">if</span>(obj<span class="hljs-operator"> &amp;&amp; </span>typeOf (obj)<span class="hljs-operator"> === </span>&#x27;<span class="hljs-keyword">object</span>&#x27;) &#123;<br>    <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span>(obj hasOwnProperty i) &#123;<br>        <span class="hljs-keyword">if</span>(obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-operator"> &amp;&amp; </span><span class="hljs-keyword">type</span><span class="hljs-constructor">Of(<span class="hljs-params">obj</span>[<span class="hljs-params">i</span>])</span><span class="hljs-operator"> === </span>&#x27;<span class="hljs-keyword">object</span>&#x27;) &#123;<br>          objClone<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj</span>[<span class="hljs-params">i</span>])</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          objClone<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  return objClone<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h5 id="JSON-对象的-parse-和-stringify"><a href="#JSON-对象的-parse-和-stringify" class="headerlink" title="JSON 对象的 parse 和 stringify"></a>JSON 对象的 parse 和 stringify</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> obj2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(obj)<br>  <span class="hljs-keyword">let</span> objClone = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(obj2)<br>  return objClone<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="实现函数柯里化"><a href="#实现函数柯里化" class="headerlink" title="实现函数柯里化"></a>实现函数柯里化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 支持多参数传递</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">progressCurrying</span>(<span class="hljs-params">fn, args</span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">var</span> len = fn.length;<br>    <span class="hljs-keyword">var</span> args = args || [];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> _args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br>        <span class="hljs-built_in">Array</span>.prototype.push.apply(args, _args);<br><br>        <span class="hljs-comment">// 如果参数个数小于最初的fn.length，则递归调用，继续收集参数</span><br>        <span class="hljs-keyword">if</span> (_args.length &lt; len) &#123;<br>            <span class="hljs-keyword">return</span> progressCurrying.call(_this, fn, _args);<br>        &#125;<br><br>        <span class="hljs-comment">// 参数收集完毕，则执行fn</span><br>        <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, _args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight lsl"><table><tr><td class="code"><pre><code class="hljs lsl"><span class="hljs-comment">// 实现一个add方法，使计算结果能够满足如下预期：</span><br>add(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) = <span class="hljs-number">6</span>;<br>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)(<span class="hljs-number">4</span>) = <span class="hljs-number">10</span>;<br>add(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)(<span class="hljs-number">5</span>) = <span class="hljs-number">15</span>;<br><br>function add() &#123;<br>    <span class="hljs-comment">// 第一次执行时，定义一个数组专门用来存储所有的参数</span><br>    var _args = Array.prototype.slice.call(arguments);<br><br>    <span class="hljs-comment">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span><br>    var _adder = function() &#123;<br>        _args.push(...arguments);<br>        return _adder;<br>    &#125;;<br><br>    <span class="hljs-comment">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span><br>    _adder.toString = function () &#123;<br>        return _args.reduce(function (a, b) &#123;<br>            return a + b;<br>        &#125;);<br>    &#125;<br>    return _adder;<br>&#125;<br><br>add(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)                <span class="hljs-comment">// 6</span><br>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)             <span class="hljs-comment">// 10</span><br>add(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)(<span class="hljs-number">5</span>)          <span class="hljs-comment">// 15</span><br>add(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>)(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure>
<figure class="highlight cos"><table><tr><td class="code"><pre><code class="hljs cos">const curry = ( fn, arr = []) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (.<span class="hljs-built_in">..args</span>) =&gt; &#123; <br><br>        <span class="hljs-comment">//判断参数总数是否和fn参数个数相等</span><br>        <span class="hljs-keyword">if</span>([.<span class="hljs-built_in">..arr</span>, .<span class="hljs-built_in">..args</span>].length === fn.length)&#123;<br>            <span class="hljs-keyword">return</span> fn(.<span class="hljs-built_in">..arr</span>, .<span class="hljs-built_in">..args</span>) <span class="hljs-comment">//拓展参数，调用fn</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> curry(fn,[.<span class="hljs-built_in">..arr</span>, .<span class="hljs-built_in">..args</span>]) <span class="hljs-comment">//迭代，传入现有的所有参数</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">const curry = ( fn, arr = []) =&gt; (...args) <br>=&gt; ( a =&gt; a.length === fn.length<br>  ? fn(...a) <br>  <span class="hljs-symbol">:</span> curry(fn, a))([...arr, ...args]) <br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>promise （all，race，allSettled）区别</title>
    <url>/2020/06/12/promise/</url>
    <content><![CDATA[<h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p>Promise.all()只有在接受的所有promise实例全部是fulfilled才会走<br>Promise.all([p1,p2,p3]).then()方法，只要有其中一个promise实例是rejected，<br>就会直接走catch方法，并且catch中只会返回第一个变成rejected的promise的错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;p2报错&#x27;</span>);<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result);<br><br><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;p3报错&#x27;</span>)<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result);<br><br><span class="hljs-built_in">Promise</span>.all([p1, p2, p3])<br>.then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(result))<br>.catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(e));<br><span class="hljs-comment">// Error: p2报错</span><br><br></code></pre></td></tr></table></figure>

<h4 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h4><p>接受的结果与入参时的promise实例一一对应，且结果的每一项都是一个对象，告诉你结果和值，<br>对象内都有一个属性叫“status”，用来明确知道对应的这个promise实例的状态（fulfilled或rejected），<br>fulfilled时，对象有value属性，rejected时有reason属性，对应两种状态的返回值。</p>
<p>重要的一点是，他不论接受入参的promise本身的状态，会返回所有promise的结果，<br>但这一点Promise.all做不到，如果你需要知道所有入参的异步操作的所有结果，<br>或者需要知道这些异步操作是否全部结束，应该使用promise.allSettled()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> resolved = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">42</span>);<br><span class="hljs-keyword">const</span> rejected = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-number">-1</span>);<br><br><span class="hljs-keyword">const</span> allSettledPromise = <span class="hljs-built_in">Promise</span>.allSettled([resolved, rejected]);<br><br>allSettledPromise.then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">results</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(results);<br>&#125;);<br><span class="hljs-comment">// [</span><br><span class="hljs-comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 42 &#125;,</span><br><span class="hljs-comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span><br><span class="hljs-comment">// ]</span><br><br></code></pre></td></tr></table></figure>

<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><p>Promise.race([p1, p2, p3])里面哪个结果获得的快，<br>就返回那个结果，不管结果本身是成功状态还是失败状态。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><br>let p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  &#125;,<span class="hljs-number">1000</span>)<br>&#125;)<br><br>let p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    reject(<span class="hljs-string">&#x27;failed&#x27;</span>)<br>  &#125;, <span class="hljs-number">500</span>)<br>&#125;)<br><br><span class="hljs-built_in">Promise</span>.race([p1, p2]).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(result)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(result)<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(error)</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(error)  <span class="hljs-regexp">//</span> 打开的是 <span class="hljs-string">&#x27;failed&#x27;</span><br>&#125;)<br><br><br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>promose</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 简单命令</title>
    <url>/2020/10/06/linux/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pwd</td>
<td>显示当前目录</td>
</tr>
<tr>
<td align="left">cd</td>
<td>改变所在目录</td>
</tr>
<tr>
<td align="left">touch</td>
<td>创建文件</td>
</tr>
<tr>
<td align="left">rm</td>
<td>删除文件</td>
</tr>
<tr>
<td align="left">vi</td>
<td>编辑文件</td>
</tr>
<tr>
<td align="left">ls</td>
<td>查看目录下的内容</td>
</tr>
<tr>
<td align="left">cat</td>
<td>显示文件的内容</td>
</tr>
<tr>
<td align="left">mv</td>
<td>移动文件</td>
</tr>
<tr>
<td align="left">rmdir</td>
<td>删除目录</td>
</tr>
</tbody></table>
<h4 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">print</span> working directory(打印工作目录)<br>输入<span class="hljs-built_in">pwd</span>命令，Linux会输出当前目录<br><br></code></pre></td></tr></table></figure>

<h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-keyword">cd</span> /      转到根目录中 <br><span class="hljs-keyword">cd</span> ~     转到<span class="hljs-string">/home/user</span>用户目录下 <br><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr</span> 转到根目录下的usr目录中<span class="hljs-params">-------------</span>绝对路径 <br><span class="hljs-keyword">cd</span> test 转到当前目录下的test子目录中<span class="hljs-params">-------</span>相对路径<br><br></code></pre></td></tr></table></figure>

<h4 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h4><p>ls命令用来查看目录的内容</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hook conclusion</title>
    <url>/2020/09/12/reactHook/</url>
    <content><![CDATA[<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p>
<h2 id="Hook-和函数组件"><a href="#Hook-和函数组件" class="headerlink" title="Hook 和函数组件"></a>Hook 和函数组件</h2><p><strong>Hook 是什么？</strong> Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允许你在 React 函数组件中添加 state 的 Hook。稍后我们将学习其他 Hook。</p>
<p><strong>什么时候我会用 Hook？</strong> 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使用 Hook。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-comment">// 你可以在这使用 Hook</span><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>之前把它们叫做“无状态组件”。<br>但现在我们为它们引入了使用 React state 的能力，所以我们叫它”函数组件”。</p>
<h2 id="State-Hook-（基础-hook）"><a href="#State-Hook-（基础-hook）" class="headerlink" title="State Hook （基础 hook）"></a>State Hook （基础 hook）</h2><p>useState() 方法里面唯一的参数就是 <strong>初始 state</strong><br>useState() 返回值为当前 <strong>state</strong> 以及更新 __state 的函数__。<br>ex: const [count, setCount] = useState()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 声明一个叫 “count” 的 state 变量。</span><br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> setCount(count + <span class="hljs-number">1</span>)&#125;&gt;<br>        Click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">class Example extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.<span class="hljs-keyword">state</span> = &#123;<br>      count: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-variable">&lt;div&gt;</span><br>        <span class="hljs-variable">&lt;p&gt;</span>You clicked &#123;this.<span class="hljs-keyword">state</span>.count&#125; times&lt;/p&gt;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> this.<span class="hljs-built_in">set</span>State(&#123; count: this.<span class="hljs-keyword">state</span>.count + <span class="hljs-number">1</span> &#125;)&#125;&gt;<br>          Click me<br>        &lt;/button&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Effect-Hook-（基础-hook）"><a href="#Effect-Hook-（基础-hook）" class="headerlink" title="Effect Hook （基础 hook）"></a>Effect Hook （基础 hook）</h2><p>Effect Hook 可以让你在函数组件中执行副作用操作<br>可以把 useEffect Hook 看做 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-comment">// Similar to componentDidMount and componentDidUpdate:</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// Update the document title using the browser API</span><br>    <span class="hljs-built_in">document</span>.title = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> setCount(count + <span class="hljs-number">1</span>)&#125;&gt;<br>        Click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>为什么要在 effect 中返回一个函数？</strong> 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p>
<p><strong>React 何时清除 effect？</strong>  React 会在组件卸载的时候执行清除操作。effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。如不需要清除 不需要返回。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-constructor">FriendStatus(<span class="hljs-params">props</span>)</span> &#123;<br>  const <span class="hljs-literal">[<span class="hljs-identifier">isOnline</span>, <span class="hljs-identifier">setIsOnline</span>]</span> = use<span class="hljs-constructor">State(<span class="hljs-params">null</span>)</span>;<br><br>  use<span class="hljs-constructor">Effect(()</span> =&gt; &#123;<br>    <span class="hljs-keyword">function</span> handle<span class="hljs-constructor">StatusChange(<span class="hljs-params">status</span>)</span> &#123;<br>      set<span class="hljs-constructor">IsOnline(<span class="hljs-params">status</span>.<span class="hljs-params">isOnline</span>)</span>;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChatAPI</span>.</span></span>subscribe<span class="hljs-constructor">ToFriendStatus(<span class="hljs-params">props</span>.<span class="hljs-params">friend</span>.<span class="hljs-params">id</span>, <span class="hljs-params">handleStatusChange</span>)</span>;<br>    <span class="hljs-comment">// Specify how to clean up after this effect:</span><br>    return <span class="hljs-keyword">function</span> cleanup<span class="hljs-literal">()</span> &#123;<br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChatAPI</span>.</span></span>unsubscribe<span class="hljs-constructor">FromFriendStatus(<span class="hljs-params">props</span>.<span class="hljs-params">friend</span>.<span class="hljs-params">id</span>, <span class="hljs-params">handleStatusChange</span>)</span>;<br>    &#125;;<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (isOnline<span class="hljs-operator"> === </span>null) &#123;<br>    return &#x27;Loading...&#x27;;<br>  &#125;<br>  return isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>effect 第二个参数</strong><br>在参数值改变时执行 effect<br>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），传一空数组（[]）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  document.title = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>;<br>&#125;, [count]); <span class="hljs-comment">// 仅在 count 更改时更新</span><br></code></pre></td></tr></table></figure>

<h2 id="useContext-（基础-hook）"><a href="#useContext-（基础-hook）" class="headerlink" title="useContext （基础 hook）"></a>useContext （基础 hook）</h2><p>Context 提供了一种在组件之间共享此类值的方式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">value</span> = useContext(MyContext);<br></code></pre></td></tr></table></figure>

<p>接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 &lt;MyContext.Provider&gt; 的 value prop 决定。</p>
<p>当组件上层最近的 &lt;MyContext.Provider&gt; 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值</p>
<p>useContext(MyContext) 相当于 class 组件中的 static contextType = MyContext 或者 &lt;MyContext.Consumer&gt;。</p>
<p>useContext(MyContext) 只是让你能够读取 context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用 &lt;MyContext.Provider&gt; 来为下层组件提供 context。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> themes = &#123;<br>  light: &#123;<br>    foreground: <span class="hljs-string">&quot;#000000&quot;</span>,<br>    background: <span class="hljs-string">&quot;#eeeeee&quot;</span><br>  &#125;,<br>  dark: &#123;<br>    foreground: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>    background: <span class="hljs-string">&quot;#222222&quot;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> ThemeContext = React.createContext(themes.light);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;ThemeContext.Provider value=&#123;themes.dark&#125;&gt;<br>      &lt;Toolbar /&gt;<br>    &lt;/ThemeContext.Provider&gt;<br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Toolbar</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;ThemedButton /&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ThemedButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> theme = useContext(ThemeContext);<br>  <span class="hljs-keyword">return</span> (<br>    &lt;button style=&#123;&#123; <span class="hljs-attr">background</span>: theme.background, <span class="hljs-attr">color</span>: theme.foreground &#125;&#125;&gt;<br>      I am styled by theme context!<br>    &lt;/button&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="useReducer-（扩展-hook）"><a href="#useReducer-（扩展-hook）" class="headerlink" title="useReducer （扩展 hook）"></a>useReducer （扩展 hook）</h2><p><strong>useState 的替代方案。</strong> 它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。<br>能在任何使用 useState 的地方都替换成使用 useReducer</p>
<h5 id="action-state为普通字符串-ex："><a href="#action-state为普通字符串-ex：" class="headerlink" title="action state为普通字符串 ex："></a>action state为普通字符串 ex：</h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> initialState = &#123;count: <span class="hljs-number">0</span>&#125;;<br><br>function reducer(<span class="hljs-keyword">state</span>, action) &#123;<br>  switch (action.type) &#123;<br>    case &#x27;increment&#x27;:<br>      return &#123;count: <span class="hljs-keyword">state</span>.count + <span class="hljs-number">1</span>&#125;;<br>    case &#x27;decrement&#x27;:<br>      return &#123;count: <span class="hljs-keyword">state</span>.count - <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">default</span>:<br>      throw new Error();<br>  &#125;<br>&#125;<br><br>function Counter() &#123;<br>  <span class="hljs-keyword">const</span> [<span class="hljs-keyword">state</span>, dispatch] = useReducer(reducer, initialState);<br>  return (<br>    <span class="hljs-variable">&lt;&gt;</span><br>      Count: &#123;<span class="hljs-keyword">state</span>.count&#125;<br>      <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-&lt;/button&gt;<br>      <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+&lt;/button&gt;<br>    &lt;/&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="action-state为对象-ex："><a href="#action-state为对象-ex：" class="headerlink" title="action state为对象 ex："></a>action state为对象 ex：</h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> initialState = &#123;<br>  count1: <span class="hljs-number">0</span>,<br>  count2: <span class="hljs-number">0</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> reducer = (<span class="hljs-keyword">state</span>, action) =&gt; &#123;<br>  switch (action.type) &#123;<br>    case &#x27;increment1&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count1: <span class="hljs-keyword">state</span>.count1 + <span class="hljs-number">1</span> &#125;;<br>    case &#x27;decrement1&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count1: <span class="hljs-keyword">state</span>.count1 - <span class="hljs-number">1</span> &#125;;<br>    case &#x27;set1&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count1: action.count &#125;;<br>    case &#x27;increment2&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count2: <span class="hljs-keyword">state</span>.count2 + <span class="hljs-number">1</span> &#125;;<br>    case &#x27;decrement2&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count2: <span class="hljs-keyword">state</span>.count2 - <span class="hljs-number">1</span> &#125;;<br>    case &#x27;set2&#x27;:<br>      return &#123; ...<span class="hljs-keyword">state</span>, count2: action.count &#125;;<br>    <span class="hljs-keyword">default</span>:<br>      throw new Error(&#x27;Unexpected action&#x27;);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> Example02 = () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [<span class="hljs-keyword">state</span>, dispatch] = useReducer(reducer, initialState);<br>  return (<br>    <span class="hljs-variable">&lt;&gt;</span><br>      <span class="hljs-variable">&lt;div&gt;</span><br>        &#123;<span class="hljs-keyword">state</span>.count1&#125;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;increment1&#x27; &#125;)&#125;&gt;+<span class="hljs-number">1</span>&lt;/button&gt;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;decrement1&#x27; &#125;)&#125;&gt;-<span class="hljs-number">1</span>&lt;/button&gt;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;set1&#x27;, count: <span class="hljs-number">0</span> &#125;)&#125;&gt;reset&lt;/button&gt;<br>      &lt;/div&gt;<br>      <span class="hljs-variable">&lt;div&gt;</span><br>        &#123;<span class="hljs-keyword">state</span>.count2&#125;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;increment2&#x27; &#125;)&#125;&gt;+<span class="hljs-number">1</span>&lt;/button&gt;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;decrement2&#x27; &#125;)&#125;&gt;-<span class="hljs-number">1</span>&lt;/button&gt;<br>        <span class="hljs-variable">&lt;button onClick=&#123;() =&gt;</span> dispatch(&#123; type: &#x27;set2&#x27;, count: <span class="hljs-number">0</span> &#125;)&#125;&gt;reset&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/&gt;<br>  );<br><br></code></pre></td></tr></table></figure>

<h5 id="结合context使用-ex："><a href="#结合context使用-ex：" class="headerlink" title="结合context使用 ex："></a>结合context使用 ex：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> CountContext = React.createContext();<br><br><span class="hljs-keyword">const</span> CountProvider = <span class="hljs-function">(<span class="hljs-params">&#123; children &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> contextValue = useReducer(reducer, initialState);<br>  <span class="hljs-keyword">return</span> (<br>    &lt;CountContext.Provider value=&#123;contextValue&#125;&gt;<br>      &#123;children&#125;<br>    &lt;/CountContext.Provider&gt;<br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> useCount = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> contextValue = useContext(CountContext);<br>  <span class="hljs-keyword">return</span> contextValue;<br><br><span class="hljs-keyword">const</span> Counter = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [count, dispatch] = useCount();<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &#123;count&#125;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;increment&#x27;</span> &#125;)&#125;&gt;+<span class="hljs-number">1</span>&lt;/button&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;decrement&#x27;</span> &#125;)&#125;&gt;<span class="hljs-number">-1</span>&lt;/button&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)&#125;&gt;reset&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure>

<h2 id="useMemo-（扩展-hook）"><a href="#useMemo-（扩展-hook）" class="headerlink" title="useMemo （扩展 hook）"></a>useMemo （扩展 hook）</h2><p>把 <strong>“创建”函数</strong> 和 <strong>依赖项数组</strong> 作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">const memoizedValue = useMemo(() =&gt; computeExpensiveValue(<span class="hljs-name">a</span>, b), [a, b])<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
<p>可以把 useMemo 作为性能优化的手段，但不要把它当成语义上的保证。<br>传入 useMemo 的函数会在渲染期间执行。不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 useEffect 的适用范畴，而不是 useMemo。<br>如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值。</p>
<h2 id="useCallback-（扩展-hook）"><a href="#useCallback-（扩展-hook）" class="headerlink" title="useCallback （扩展 hook）"></a>useCallback （扩展 hook）</h2><p>把 <strong>内联回调函数</strong> 及 <strong>依赖项数组</strong> 作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs lisp">const memoizedCallback = useCallback(<br>  () =&gt; &#123;<br>    doSomething(<span class="hljs-name">a</span>, b)<span class="hljs-comment">;</span><br>  &#125;,<br>  [a, b],<br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
<p>注: 依赖项数组不会作为参数传给回调函数。<br><strong>useCallback(fn, deps)  相当于  useMemo(() =&gt; fn, deps)</strong></p>
<h2 id="useRef-（扩展-hook）"><a href="#useRef-（扩展-hook）" class="headerlink" title="useRef （扩展 hook）"></a>useRef （扩展 hook）</h2><p>useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p>
<h5 id="第一种用法：作用于DOM元素"><a href="#第一种用法：作用于DOM元素" class="headerlink" title="第一种用法：作用于DOM元素"></a>第一种用法：作用于DOM元素</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> UseRefComp=<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-comment">//创建ref</span><br>		<span class="hljs-keyword">const</span> inputRef=useRef()<br>		<span class="hljs-keyword">const</span> getValue= <span class="hljs-function">() =&gt;</span> &#123;<br>		<span class="hljs-comment">//访问ref</span><br>			<span class="hljs-built_in">console</span>.log(inputRef.current.value) &#125;<br>		<span class="hljs-comment">//挂载</span><br>		<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>		&lt;input ref=&#123;inputRef&#125; type=<span class="hljs-string">&quot;text&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;getValue&#125;</span>&gt;</span>获取input的</span><br><span class="xml">		值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span> &lt;/div&gt;<br>) &#125;<br></code></pre></td></tr></table></figure>

<h5 id="第二种用法：在函数组件中的一个全局变量，不会因为重复-render-重复申明，-类似于类组件的this-xxx"><a href="#第二种用法：在函数组件中的一个全局变量，不会因为重复-render-重复申明，-类似于类组件的this-xxx" class="headerlink" title="第二种用法：在函数组件中的一个全局变量，不会因为重复 render 重复申明， 类似于类组件的this.xxx"></a>第二种用法：在函数组件中的一个全局变量，不会因为重复 render 重复申明， 类似于类组件的this.xxx</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">const</span> t=useRef(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">()=&gt;</span>&#123;<br>	t.current=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;timer&#x27;</span>)<br>	&#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-keyword">const</span> handleClear = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearTimeout</span>(t.current)<br><br><span class="hljs-keyword">return</span> (<br>	&lt;&gt;<br>		&lt;button onClick=&#123;handleClick&#125;&gt;start&lt;/button&gt;<br>		&lt;button onClick=&#123;handleClear&#125;&gt;clear&lt;/button&gt;<br>	&lt;/&gt;<br>)&#125;<br></code></pre></td></tr></table></figure>

<h2 id="useImperativeHandle-（扩展-hook）"><a href="#useImperativeHandle-（扩展-hook）" class="headerlink" title="useImperativeHandle （扩展 hook）"></a>useImperativeHandle （扩展 hook）</h2><p>useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。 需要结合 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref">React.forwardRef</a>  一起使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">import</span> &#123;useState, useImperativeHandle,forwardRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// props子组件中需要接受ref</span><br><span class="hljs-keyword">let</span> ChildComp = <span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此处注意useImperativeHandle方法的的第一个参数是目标元素的ref引用</span><br>    useImperativeHandle(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>        <span class="hljs-comment">// changeVal 就是暴露给父组件的方法</span><br>        changeVal: <span class="hljs-function">(<span class="hljs-params">newVal</span>) =&gt;</span> &#123;<br><br>        &#125;<br>    &#125;));<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;&#123;val&#125;&lt;/div&gt;<br>    )<br>&#125;<br><br><br><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">import</span> &#123;useRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> FComp = <span class="hljs-function">() =&gt;</span> &#123;<br><br>    <span class="hljs-keyword">const</span> childRef = useRef();<br>    <span class="hljs-keyword">const</span> updateChildState = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// changeVal就是子组件暴露给父组件的方法</span><br>        childRef.current.changeVal(<span class="hljs-number">99</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &lt;ChildComp ref=&#123;childRef&#125; /&gt;<br>            &lt;button onClick=&#123;updateChildState&#125;&gt;触发子组件方法&lt;/button&gt;<br>        &lt;/&gt;<br>    )<br><br></code></pre></td></tr></table></figure>

<h2 id="useLayoutEffect-（扩展-hook）"><a href="#useLayoutEffect-（扩展-hook）" class="headerlink" title="useLayoutEffect （扩展 hook）"></a>useLayoutEffect （扩展 hook）</h2><p>其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。</p>
<p><strong>useEffect【异步】</strong><br>useEffect会在渲染的内容更新到DOM上后执行,不会阻塞DOM的更新<br><strong>useLayoutEffect【同步】</strong><br>useLayoutEffect会在渲染的内容更新到DOM上之前进行,会阻塞DOM的更新</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>reactHook</tag>
      </tags>
  </entry>
  <entry>
    <title>React Recoil</title>
    <url>/2020/09/13/reactRecoil/</url>
    <content><![CDATA[<h3 id="Recoil-简单总结"><a href="#Recoil-简单总结" class="headerlink" title="Recoil 简单总结"></a><a href="https://recoiljs.org/docs/introduction/motivation">Recoil</a> 简单总结</h3><p>(Facebook 官方 React 状态管理器 )解决问题： 跨组件状态共享</p>
<h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">   <br>atom()                            定义状态 <br>selector()                        定义依赖状态/异步状态 <br>useRecoilValue(<span class="hljs-keyword">state</span>)             仅读状态  <span class="hljs-keyword">const</span> a = useRecoilState(<span class="hljs-keyword">state</span>)<br>useRecoilState(<span class="hljs-keyword">state</span>)             读写状态  <span class="hljs-keyword">const</span> [a, <span class="hljs-built_in">set</span>A] = useRecoilState(<span class="hljs-keyword">state</span>)<br>useSetRecoilState(<span class="hljs-keyword">state</span>)          写入状态  <span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span>A = useSetRecoilState(<span class="hljs-keyword">state</span>);  <span class="hljs-built_in">set</span>A(a) <br>useResetRecoilState(<span class="hljs-keyword">state</span>)        状态重置初始化值 <br>useRecoilValueLoadable(<span class="hljs-keyword">state</span>)     读取异步状态的值<br>useRecoilStateLoadable(<span class="hljs-keyword">state</span>)     读写异步状态的值<br><br></code></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用Recoil，最外层包裹RecoilRoot（一般在app），这个和大部分状态管理器一致，通过 context 来跨组件传递数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; RecoilRoot &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;recoil&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;RecoilRoot&gt;<br>        ...<br>    &lt;/RecoilRoot&gt;<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h4 id="跨组件状态共享"><a href="#跨组件状态共享" class="headerlink" title="跨组件状态共享"></a>跨组件状态共享</h4><p>在 Recoil 中，通过 atom 来定义一个状态</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><br><span class="hljs-keyword">const</span> inputValueState = atom(&#123;<br>  <span class="hljs-built_in">key</span>: <span class="hljs-string">&quot;inputValue&quot;</span>,<br>  <span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;);<br><br></code></pre></td></tr></table></figure>

<p>通过 useRecoilState 来消费状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useRecoilState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;recoil&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; inputValue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span>;<br><br><span class="hljs-keyword">const</span> InputA = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = useRecoilState(inputValueState);<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> setValue(e.target.value)&#125; /&gt;</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> InputA;<br><br></code></pre></td></tr></table></figure>

<h4 id="状态依赖"><a href="#状态依赖" class="headerlink" title="状态依赖"></a>状态依赖</h4><p>有些状态需要依赖其它状态，通过 selector 来定义这个状态</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> filterdInputValue = selector(&#123;<br>  key: <span class="hljs-string">&quot;filterdInputValue&quot;</span>,<br>  <span class="hljs-keyword">get</span>: (&#123;<span class="hljs-keyword">get</span>&#125;) =&gt; &#123;<br>    <span class="hljs-comment">// 通过 get 可以读取其它状态</span><br>    <span class="hljs-keyword">const</span> inputValue = <span class="hljs-keyword">get</span>(inputValueState);<br>    <span class="hljs-keyword">return</span> inputValue.replace(/[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]/ig, <span class="hljs-string">&quot;&quot;</span>);<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure>

<h4 id="异步情况"><a href="#异步情况" class="headerlink" title="异步情况"></a>异步情况</h4><p>Recoil 提供了一个 useRecoilValueLoadable 来处理异步请求</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><br><span class="hljs-keyword">const</span> currentUserNameQuery = selector(&#123;<br>  key: <span class="hljs-string">&quot;CurrentUserName&quot;</span>,<br>  <span class="hljs-keyword">get</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> queryUserInfo();<br>    <span class="hljs-keyword">return</span> response.name;<br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure>
<p>需要通过 selector 来定义异步状态，如果 get 函数是一个 Promise，则代表该状态为异步状态，需要使用 useRecoilValueLoadable 来消费该状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> UserName = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> userNameLoadable = useRecoilValueLoadable(currentUserNameQuery);<br>  <span class="hljs-keyword">switch</span> (userNameLoadable.state) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hasValue&quot;</span>:<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;userNameLoadable.contents&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;loading&quot;</span>:<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hasError&quot;</span>:<br>      <span class="hljs-keyword">throw</span> userNameLoadable.contents;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>

<h4 id="消费状态情况"><a href="#消费状态情况" class="headerlink" title="消费状态情况"></a>消费状态情况</h4><p>消费一个状态的时候，需要 import 两个东西</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><br><span class="hljs-keyword">import</span> &#123; useRecoilState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;recoil&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; inputValueState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store&quot;</span>;<br><br><span class="hljs-comment">// 用法</span><br>useRecoilState(inputValueState);<br><br></code></pre></td></tr></table></figure>

<p>也可以直接通过字符串 key 消费的，但这样和 redux 问题一样了，无法支持 ts</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><br><span class="hljs-keyword">import</span> &#123; useRecoilState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;recoil&quot;</span>;<br>useRecoilState(<span class="hljs-string">&#x27;inputValueState&#x27;</span>);<br><br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>reactRecoil</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.0 简单使用</title>
    <url>/2020/10/22/vue3/</url>
    <content><![CDATA[<h3 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h3><ul>
<li>向下兼容，Vue3 支持大多数 Vue2 的特性</li>
<li>性能的提升，框架更快，更轻</li>
<li>新推出的Composition API</li>
<li>更好TypeScript支持</li>
</ul>
<h4 id="安装vue3"><a href="#安装vue3" class="headerlink" title="安装vue3"></a>安装vue3</h4><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><br><span class="hljs-comment"># 全局安装</span><br><span class="hljs-string">cnpm </span>i -g <span class="hljs-built_in">create-vite-app</span><br><span class="hljs-built_in">#</span><br><span class="hljs-built_in">create-vite-app</span> <span class="hljs-string">vue3-res</span><br><span class="hljs-string">cd </span><span class="hljs-string">vue3-res</span><br><span class="hljs-string">cnpm </span>i<br><br></code></pre></td></tr></table></figure>

<h4 id="vue-实例的创建以及挂载变化"><a href="#vue-实例的创建以及挂载变化" class="headerlink" title="vue 实例的创建以及挂载变化"></a>vue 实例的创建以及挂载变化</h4><ul>
<li>Vue2 创建实例并挂载 DOM 上<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>const app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    render: <span class="hljs-function"><span class="hljs-params">(h)</span> =&gt;</span> h(App)<br>&#125;)<br><br>app.$mount(<span class="hljs-string">&quot;#app&quot;</span>)<br><br><br></code></pre></td></tr></table></figure></li>
<li>Vue3 创建实例并挂载 DOM 上</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = createApp(App)<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure>

<h4 id="生命周期变化"><a href="#生命周期变化" class="headerlink" title="生命周期变化"></a>生命周期变化</h4><table>
<thead>
<tr>
<th align="left">vue2</th>
<th>vue3</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeCreate</td>
<td>setup()</td>
<td>setup() :开始创建组件之前，在beforeCreate和created之前执行。创建的是data和method</td>
</tr>
<tr>
<td align="left">created</td>
<td>setup()</td>
<td></td>
</tr>
<tr>
<td align="left">beforeMount</td>
<td>onBeforeMount</td>
<td>组件挂载到节点上之前执行的函数</td>
</tr>
<tr>
<td align="left">mounted</td>
<td>onMounted</td>
<td>组件挂载完成后执行的函数</td>
</tr>
<tr>
<td align="left">beforeUpdate</td>
<td>onBeforeUpdate</td>
<td>组件更新之前执行的函数</td>
</tr>
<tr>
<td align="left">updated</td>
<td>onUpdated</td>
<td>组件更新完成之后执行的函数</td>
</tr>
<tr>
<td align="left">beforeDestroy</td>
<td>onBeforeUnmount</td>
<td>组件卸载之前执行的函数</td>
</tr>
<tr>
<td align="left">destroyed</td>
<td>onUnmounted</td>
<td>组件卸载完成后执行的函数</td>
</tr>
<tr>
<td align="left">activated</td>
<td>onActivated</td>
<td>被包含在<keep-alive>中的组件，会多出两个生命周期钩子函数。被激活时执行</td>
</tr>
<tr>
<td align="left">deactivated</td>
<td>onDeactivated</td>
<td>比如从 A 组件，切换到 B 组件，A 组件消失时执行</td>
</tr>
<tr>
<td align="left">errorCaptured</td>
<td>onErrorCaptured</td>
<td>当捕获一个来自子孙组件的异常时激活钩子函数</td>
</tr>
</tbody></table>
<h4 id="vue-组件-指令-插件注册-变化"><a href="#vue-组件-指令-插件注册-变化" class="headerlink" title="vue 组件/指令/插件注册 变化"></a>vue 组件/指令/插件注册 变化</h4><ul>
<li>vue2<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>component(&#x27;SearchInput&#x27;, SearchInputComponent)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>directive(&#x27;focus&#x27;, FocusDirective)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>use(LocalePlugin)<br><br></code></pre></td></tr></table></figure></li>
<li>vue3</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br>app.component(<span class="hljs-symbol">&#x27;SearchInput</span>&#x27;, SearchInputComponent)<br>app.directive(<span class="hljs-symbol">&#x27;focus</span>&#x27;, FocusDirective)<br>app.<span class="hljs-keyword">use</span>(LocalePlugin)<br><br><span class="hljs-comment">//或者</span><br><br>Vue.createApp(&#123;&#125;)<br>    .component(<span class="hljs-symbol">&#x27;SearchInput</span>&#x27;, SearchInputComponent)<br>    .directive(<span class="hljs-symbol">&#x27;focus</span>&#x27;, FocusDirective)<br>    .<span class="hljs-keyword">use</span>(LocalePlugin)<br><br></code></pre></td></tr></table></figure>

<h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><p>与之前option配置方法写组件的时候相比，当组件越来越多，业务复杂度越来越高，导致后续维护非常的复杂，同时代码可复用性不高</p>
<ul>
<li>reactive</li>
<li>ref</li>
<li>computed</li>
<li>watchEffect</li>
<li>toRefs</li>
<li>生命周期的hooks</li>
</ul>
<h5 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h5><blockquote>
<p>将传入的对象生成新的深度响应式对象,其不等于原始对象</p>
</blockquote>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">const obj = reactive(&#123; <br><span class="hljs-symbol">    count:</span> <span class="hljs-number">0</span>,<br><span class="hljs-symbol">    books:</span>[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>&#125;)<br></code></pre></td></tr></table></figure>
<h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><blockquote>
<p>将传入的简单数据值生成新的响应式对象</p>
</blockquote>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><code class="hljs irpf90">const <span class="hljs-built_in">count</span> = ref(<span class="hljs-number">0</span>)<br>console<span class="hljs-number">.</span><span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span><span class="hljs-number">.</span><span class="hljs-keyword">value</span>) // <span class="hljs-number">0</span><br><br><span class="hljs-built_in">count</span><span class="hljs-number">.</span><span class="hljs-keyword">value</span>++<br>console<span class="hljs-number">.</span><span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span><span class="hljs-number">.</span><span class="hljs-keyword">value</span>) // <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>
<h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><blockquote>
<p>使用 getter 函数，并为从 getter 返回的值返回一个不变的响应式 ref 对象</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">const</span> count = <span class="hljs-keyword">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> plusOne = computed(() =&gt; count.<span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>)<br><br>console.log(plusOne.<span class="hljs-keyword">value</span>) <span class="hljs-comment">// 2</span><br><br>plusOne.<span class="hljs-keyword">value</span>++ <span class="hljs-comment">// error</span><br><br></code></pre></td></tr></table></figure>
<h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><blockquote>
<p>在响应式地跟踪其依赖项时立即运行一个函数，并在更改依赖项时重新运行它</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">const count = ref(<span class="hljs-number">0</span>)<br><br>watchEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(count.value))<br><span class="hljs-regexp">//</span> -&gt; logs <span class="hljs-number">0</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  count.value++<br>  <span class="hljs-regexp">//</span> -&gt; logs <span class="hljs-number">1</span><br>&#125;, <span class="hljs-number">100</span>)<br><br></code></pre></td></tr></table></figure>

<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf"><br>// 侦听一个getter<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = reactive(&#123; count: <span class="hljs-number">0</span> &#125;)<br>watch(<br>  () =&gt; <span class="hljs-keyword">state</span>.count,<br>  (count, prevCount) =&gt; &#123;<br>    /* ... */<br>  &#125;<br>)<br><br>// 直接侦听一个ref<br><span class="hljs-keyword">const</span> count = ref(<span class="hljs-number">0</span>)<br>watch(count, (count, prevCount) =&gt; &#123;<br>  /* ... */<br>&#125;)<br><br><br></code></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue3.0</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 常用方法</title>
    <url>/2020/11/04/jsDev/</url>
    <content><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h4 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h4><blockquote>
<p>普通数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> , <span class="hljs-number">8</span> ,<span class="hljs-number">9</span>]<span class="hljs-string">,arr2</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<span class="hljs-string">;</span><br><br><span class="hljs-string">const</span> <span class="hljs-string">intersection</span> <span class="hljs-string">=</span> <span class="hljs-string">arr1.filter</span> <span class="hljs-string">(</span> <br>   <span class="hljs-string">function</span> <span class="hljs-string">(val)</span> &#123; <br>      <span class="hljs-string">return</span> <span class="hljs-string">arr2.indexOf(val)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">-1</span> <br>   &#125;<span class="hljs-string">)</span><br><span class="hljs-string">console.log(intersection)</span>  <span class="hljs-string">//[5,</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-number">9</span><span class="hljs-string">]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>数组对象<br>数组对象目前仅针对value值为简单的Number，String，Boolan数据类型 文中JSON.stringify比较对象是简写方法</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery">const arr1 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br>const arr2 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br>const result = arr2<span class="hljs-built_in">.filter</span>(<span class="hljs-keyword">function</span> (v) &#123;<br>  <span class="hljs-keyword">return</span> arr1.<span class="hljs-keyword">some</span>(n =&gt; JSON.stringify(n) === JSON.stringify(v))<br>&#125;)<br>console.log(result); // [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;]<br><br></code></pre></td></tr></table></figure>

<h4 id="数组并集"><a href="#数组并集" class="headerlink" title="数组并集"></a>数组并集</h4><blockquote>
<p>普通数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-string">const</span> <span class="hljs-string">arr2</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<span class="hljs-string">;</span><br><span class="hljs-string">const</span> <span class="hljs-string">result</span> <span class="hljs-string">=</span> <span class="hljs-string">arr1.concat(arr2.filter(v</span> <span class="hljs-string">=&gt;</span> <span class="hljs-type">!arr1.includes(v)))</span><br><span class="hljs-string">console.log(result)</span> <span class="hljs-string">//[1,</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-number">4</span><span class="hljs-string">,</span> <span class="hljs-number">5</span><span class="hljs-string">,</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">6</span><span class="hljs-string">,</span> <span class="hljs-number">7</span><span class="hljs-string">]</span><br><br></code></pre></td></tr></table></figure>

<blockquote>
<p>数组对象</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery">const arr1 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;];<br>const arr2 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br><span class="hljs-keyword">let</span> arr3 = arr1<span class="hljs-built_in">.concat</span>(arr2);<br><span class="hljs-keyword">let</span> result = [];<br><span class="hljs-keyword">let</span> obj = [];<br>result = arr3.reduce(<span class="hljs-keyword">function</span> (prev, cur, index, arr) &#123;<br>  obj[cur<span class="hljs-built_in">.id</span>] ? <span class="hljs-string">&#x27;&#x27;</span> : obj[cur<span class="hljs-built_in">.id</span>] =<span class="hljs-built_in"> true</span> &amp;&amp; prev.push(cur);<br>  <span class="hljs-keyword">return</span> prev;<br>&#125;, []);<br>console.log(result); //[&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;]<br><br></code></pre></td></tr></table></figure>
<h4 id="数组差集"><a href="#数组差集" class="headerlink" title="数组差集"></a>数组差集</h4><blockquote>
<p>普通数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-string">const</span> <span class="hljs-string">arr2</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<span class="hljs-string">;</span><br><span class="hljs-string">const</span> <span class="hljs-string">diff</span> <span class="hljs-string">=</span> <span class="hljs-string">arr1.filter(item</span> <span class="hljs-string">=&gt;</span> <span class="hljs-type">!new</span> <span class="hljs-string">Set(arr2).has(item))</span><br><span class="hljs-string">console.log(diff)</span> <span class="hljs-string">//[</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-number">4</span> <span class="hljs-string">]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>数组对象</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> arr1 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;];<br><span class="hljs-keyword">let</span> arr2 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br><span class="hljs-keyword">let</span> result = arr1<span class="hljs-built_in">.filter</span>(<span class="hljs-keyword">function</span> (v) &#123;<br>  <span class="hljs-keyword">return</span> arr2.<span class="hljs-keyword">every</span>(n =&gt; JSON.stringify(n) !== JSON.stringify(v))<br>&#125;)<br>console.log(result); // [ &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125; ]<br><br></code></pre></td></tr></table></figure>

<h4 id="数组补集"><a href="#数组补集" class="headerlink" title="数组补集"></a>数组补集</h4><blockquote>
<p>普通数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-string">const</span> <span class="hljs-string">arr2</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<span class="hljs-string">;</span><br><span class="hljs-string">const</span> <span class="hljs-string">difference</span> <span class="hljs-string">=</span> <span class="hljs-string">Array.from(new</span> <span class="hljs-string">Set(arr1.concat(arr2).filter(v</span> <span class="hljs-string">=&gt;</span> <span class="hljs-type">!new</span> <span class="hljs-string">Set(arr1).has(v)</span> <span class="hljs-string">||</span> <span class="hljs-type">!new</span> <span class="hljs-string">Set(arr2).has(v))))</span> <br><span class="hljs-string">console.log(difference)</span> <span class="hljs-string">//[</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-number">4</span><span class="hljs-string">,</span> <span class="hljs-number">6</span><span class="hljs-string">,</span> <span class="hljs-number">7</span> <span class="hljs-string">]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>数组对象</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery"><br><span class="hljs-keyword">let</span> arr1 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;];<br><span class="hljs-keyword">let</span> arr2 = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br><span class="hljs-keyword">let</span> arr3 = arr1<span class="hljs-built_in">.concat</span>(arr2);<br><span class="hljs-keyword">let</span> result = arr3<span class="hljs-built_in">.filter</span>(<span class="hljs-keyword">function</span> (v) &#123;<br>  <span class="hljs-keyword">return</span> arr1.<span class="hljs-keyword">every</span>(n =&gt; JSON.stringify(n) !== JSON.stringify(v)) || arr2.<span class="hljs-keyword">every</span>(n =&gt; JSON.stringify(n) !== JSON.stringify(v))<br>&#125;)<br>console.log(result); // [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;]<br><br></code></pre></td></tr></table></figure>

<h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><blockquote>
<p>普通数组</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(Array.from(new Set([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]))) //[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-attribute">console</span>.log([...new Set([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])]) //[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>数组对象</p>
</blockquote>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery">const arr = [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;, &#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;];<br>const result = [];<br>arr.forEach(<span class="hljs-type">item</span>=&gt;&#123;<br>   !result.<span class="hljs-keyword">some</span>(v =&gt; JSON.stringify(v) === JSON.stringify(<span class="hljs-type">item</span>)) &amp;&amp; result.push(<span class="hljs-type">item</span>)<br>&#125;)<br>console.log(result) //[&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name1&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name2&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name3&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name4&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;name5&#x27;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span> &#125;]<br><br></code></pre></td></tr></table></figure>

<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">const</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [&#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Rom&quot;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">12</span> &#125;, &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">22</span> &#125;]<span class="hljs-string">.sort((a,</span> <span class="hljs-string">b)</span> <span class="hljs-string">=&gt;</span> &#123; <span class="hljs-string">return</span> <span class="hljs-string">a.age</span> <span class="hljs-bullet">-</span> <span class="hljs-string">b.age</span> &#125;<span class="hljs-string">)//升序</span><br><span class="hljs-string">const</span> <span class="hljs-string">arr2</span> <span class="hljs-string">=</span> [&#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Rom&quot;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">12</span> &#125;, &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">22</span> &#125;]<span class="hljs-string">.sort((a,</span> <span class="hljs-string">b)</span> <span class="hljs-string">=&gt;</span> &#123; <span class="hljs-string">return</span> <span class="hljs-string">-a.age</span> <span class="hljs-string">+</span> <span class="hljs-string">b.age</span> &#125;<span class="hljs-string">)//降序</span><br><span class="hljs-string">console.log(arr2)</span> <span class="hljs-string">//</span> [&#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">age:22</span> &#125;, &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Rom&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">12</span> &#125;]<br><span class="hljs-string">console.log(arr1)</span> <span class="hljs-string">//</span> [ &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Rom&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">12</span> &#125;, &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">22</span> &#125; ]<br><br></code></pre></td></tr></table></figure>

<h4 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">Math.max(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) <span class="hljs-comment">//4</span><br>Math.max.apply(<span class="hljs-keyword">this</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) <span class="hljs-comment">//4</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>].reduce((prev, cur, curIndex, arr) =&gt; &#123;<br>   <span class="hljs-keyword">return</span> Math.max(prev, cur);<br>&#125;, <span class="hljs-number">0</span>) <span class="hljs-comment">//4</span><br><br></code></pre></td></tr></table></figure>

<h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>].reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(prev, cur)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> prev + cur;<br>&#125;, <span class="hljs-number">0</span>) <span class="hljs-comment">//10 </span><br><br> [&#123;age:<span class="hljs-number">1</span>&#125;,&#123;age:<span class="hljs-number">2</span>&#125;].reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(prev, cur)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> prev + cur.age;<br>&#125;, <span class="hljs-number">0</span>) <span class="hljs-comment">//3</span><br><br></code></pre></td></tr></table></figure>

<h4 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h4><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">const</span> arr<span class="hljs-number">1</span> =[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>].concat([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) //[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-attribute">const</span> arr<span class="hljs-number">2</span> =[...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],...[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]] //[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-attribute">const</span> arrA =<span class="hljs-meta"> [1, 2], arrB = [3, 4]</span><br><span class="hljs-attribute">const</span> arr<span class="hljs-number">3</span> =[].concat.apply(arrA, arrB)//<span class="hljs-meta"> [1,2,3,4]</span><br><br></code></pre></td></tr></table></figure>

<h4 id="数组中是否包含某值"><a href="#数组中是否包含某值" class="headerlink" title="数组中是否包含某值"></a>数组中是否包含某值</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">console.log([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>)) <span class="hljs-comment">//false</span><br>console.log([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].indexOf(<span class="hljs-number">4</span>)) <span class="hljs-comment">//-1 如果存在换回索引</span><br>console.log([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].find((item) =&gt; item === <span class="hljs-number">3</span>)) <span class="hljs-comment">//3 如果数组中无值返回undefined</span><br>console.log([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].findIndex((item) =&gt; item === <span class="hljs-number">3</span>)) <span class="hljs-comment">//2 如果数组中无值返回-1</span><br><br><span class="hljs-keyword">const</span> flag = [&#123;age:<span class="hljs-number">1</span>&#125;,&#123;age:<span class="hljs-number">2</span>&#125;].some(v=&gt;JSON.<span class="hljs-built_in">string</span>ify(v)===JSON.<span class="hljs-built_in">string</span>ify(&#123;age:<span class="hljs-number">2</span>&#125;))<br><br></code></pre></td></tr></table></figure>

<h4 id="数组满足项"><a href="#数组满足项" class="headerlink" title="数组满足项"></a>数组满足项</h4><blockquote>
<p>数组每一项都满足</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].every(item =&gt; &#123; <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span> &#125;)<br><br></code></pre></td></tr></table></figure>

<blockquote>
<p>数组有一项满足</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].some(item =&gt; &#123; <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span> &#125;)<br><br></code></pre></td></tr></table></figure>


<h4 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> arrName = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]<br><span class="hljs-keyword">const</span> arrAge=[<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;30&#x27;</span>,<span class="hljs-string">&#x27;40&#x27;</span>]<br><span class="hljs-keyword">const</span> arrDec = [<span class="hljs-string">&#x27;描述1&#x27;</span>, <span class="hljs-string">&#x27;描述2&#x27;</span>, <span class="hljs-string">&#x27;描述3&#x27;</span>]<br><span class="hljs-keyword">const</span> obj = arrName.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">name</span>: item, <span class="hljs-attr">age</span>: arrAge[index],<span class="hljs-attr">dec</span>:arrDec[index]&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>

<h4 id="数组添加元素"><a href="#数组添加元素" class="headerlink" title="数组添加元素"></a>数组添加元素</h4><blockquote>
<p>arr.push() 从后面添加元素，返回值为添加完后的数组的长度</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-string">console.log(arr.push(5))</span>   <span class="hljs-string">//</span> <span class="hljs-number">6</span><br><span class="hljs-string">console.log(arr)</span> <span class="hljs-string">//</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.unshift() 从前面添加元素, 返回值是添加完后的数组的长度</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">let</span> arr =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">console</span>.log(arr.unshift(<span class="hljs-number">2</span>))    // <span class="hljs-number">6</span><br><span class="hljs-attribute">console</span>.log(arr)  //[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br></code></pre></td></tr></table></figure>

<h4 id="数组删除元素"><a href="#数组删除元素" class="headerlink" title="数组删除元素"></a>数组删除元素</h4><blockquote>
<p>arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>console.log(arr.pop())     <span class="hljs-comment">// 5</span><br>console.log(arr)  <span class="hljs-comment">//[1,2,3,4]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.shift() 从前面删除元素，只能删除一个 返回值是删除的元素</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-string">console.log(arr.shift())</span>  <span class="hljs-string">//</span> <span class="hljs-number">1</span><br><span class="hljs-string">console.log(arr)</span>   <span class="hljs-string">//</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.splice(i,n) 删除从i(索引值)开始之后的那个元素。返回值是删除的元素, 改变了原数组</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>console.log(arr.splice(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))     <span class="hljs-comment">//[3,4]</span><br>console.log(arr)    <span class="hljs-comment">// [1,2,5]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组, 不改变原数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-string">console.log(arr.slice(1,3))</span>   <span class="hljs-string">//</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-string">console.log(arr)</span>    <span class="hljs-string">//</span>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br></code></pre></td></tr></table></figure>

<h4 id="其他数组方法"><a href="#其他数组方法" class="headerlink" title="其他数组方法"></a>其他数组方法</h4><blockquote>
<p>arr.concat() 连接两个数组 返回值为连接后的新数组</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-string">console.log(arr.concat([1,2]))</span>  <span class="hljs-string">//</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-string">console.log(arr)</span>   <span class="hljs-string">//</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>str.split() 将字符串转化为数组</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123456&#x27;</span><br>console.<span class="hljs-built_in">log</span>(str.<span class="hljs-keyword">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)) // [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.forEach(callback) 返回值undefined 通过改变数组下标改变原来=数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]; <br><span class="hljs-keyword">var</span> res = arr.forEach(<span class="hljs-function">(<span class="hljs-params">item,index,arr</span>)=&gt;</span>&#123;     <br> arr[index] = item * <span class="hljs-number">2</span>; <br> <span class="hljs-keyword">return</span> arr <br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [2,4,6,8]</span><br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">// undefined </span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>arr.map(callback) 映射数组(遍历数组),有return 返回一个新数组，  原数组不改变</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">var</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<span class="hljs-string">;</span> <br><span class="hljs-string">var</span> <span class="hljs-string">res1</span> <span class="hljs-string">=</span> <span class="hljs-string">arr1.map((item,index,arr)=&gt;&#123;</span> <br> <span class="hljs-string">item</span> <span class="hljs-string">=</span> <span class="hljs-string">item</span> <span class="hljs-string">*</span> <span class="hljs-number">3</span><span class="hljs-string">;</span> <br> <span class="hljs-string">return</span> <span class="hljs-string">item;</span> <br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">console.log(arr1);</span> <span class="hljs-string">//</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-string">console.log(res1);</span> <span class="hljs-string">//</span> [<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.filter(callback) 过滤数组，返回一个满足要求的数组 </p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>let arr1 = arr.filter( (value, index) =&gt; value&lt;<span class="hljs-number">3</span>)<br>console.log(arr1)    <span class="hljs-comment">// [1, 2]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.reduce(callback, initialValue) 迭代数组的所有项，累加器，数组中的每个值（从左到右）合并，最终计算为一个值</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">let arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>let arr1 = arr.reduce((preValue, curValue) =&gt; <br>    preValue + curValue<br>)<br>console.log(arr1)    <span class="hljs-comment">// 10</span><br><br></code></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">数组去重<br>let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>let newArr = arr.reduce((pre,cur)=&gt;&#123;<br>    <span class="hljs-keyword">if</span>(!pre.includes(cur))&#123;<br>      <span class="hljs-keyword">return</span> pre.concat(cur)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">return</span> pre<br>    &#125;<br>&#125;,[])<br>console.log(newArr);<span class="hljs-comment">// [1, 2, 3, 4]</span><br><br></code></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">数组降维</span><br><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]]]<br><span class="hljs-string">const</span> <span class="hljs-string">newArr</span> <span class="hljs-string">=</span> <span class="hljs-string">function(arr)&#123;</span><br>   <span class="hljs-string">return</span> <span class="hljs-string">arr.reduce((pre,cur)=&gt;pre.concat(Array.isArray(cur)?newArr(cur):cur),[])</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">console.log(newArr(arr));</span> <span class="hljs-string">//[0,</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-number">4</span><span class="hljs-string">,</span> <span class="hljs-number">5</span><span class="hljs-string">,</span> <span class="hljs-number">6</span><span class="hljs-string">,</span> <span class="hljs-number">7</span><span class="hljs-string">]</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.reduceRight(callback, initialValue) 与arr.reduce()功能一样，不同的是，reduceRight()从数组的末尾向前将数组中的数组项做累加。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.indexOf() 查找某个元素的索引值，若有重复的，则返回第一个查到的索引值若不存在，则返回 -1<br>arr.lastIndexOf()   和arr.indexOf()的功能一样，不同的是从后往前查找</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>
<blockquote>
<p>Array.from() 将伪数组变成数组，就是只要有length的就可以转成数组。 —es6</p>
</blockquote>
<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">let str = <span class="hljs-string">&#x27;12345&#x27;</span><br>console<span class="hljs-meta">.log(</span><span class="hljs-meta">Array</span>.<span class="hljs-meta">from</span>(str))    // [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>]<br><br>let obj = &#123;0:<span class="hljs-string">&#x27;a&#x27;</span>,1:<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-meta">length</span>:2&#125;<br>console<span class="hljs-meta">.log(</span><span class="hljs-meta">Array</span>.<span class="hljs-meta">from</span>(obj))   // [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>Array.of() 将一组值转换成数组，类似于声明数组    —es6</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing">let <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;11&#x27;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">Array</span>.of(<span class="hljs-built_in">str</span>))   <span class="hljs-comment">// [&#x27;11&#x27;]</span><br> <br>等价于<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;11&#x27;</span>))  <span class="hljs-comment">// [&#x27;11]</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>arr.find(callback) 找到第一个符合条件的数组成员<br>arr.findIndex(callback) 找到第一个符合条件的数组成员的索引值<br>arr.keys() 遍历数组的键名<br>arr.values() 遍历数组键值<br>arr.entries() 遍历数组的键名和键值</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-string">let</span> <span class="hljs-string">arr2</span> <span class="hljs-string">=</span> <span class="hljs-string">arr.keys()</span><br><span class="hljs-string">for</span> <span class="hljs-string">(let</span> <span class="hljs-string">key</span> <span class="hljs-string">of</span> <span class="hljs-string">arr2)</span> &#123;<br>    <span class="hljs-string">console.log(key);</span>   <span class="hljs-string">//</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-string">let</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> <span class="hljs-string">arr.values()</span><br><span class="hljs-string">for</span> <span class="hljs-string">(let</span> <span class="hljs-string">val</span> <span class="hljs-string">of</span> <span class="hljs-string">arr1)</span> &#123;<br>     <span class="hljs-string">console.log(val);</span>   <span class="hljs-string">//</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>&#125;<br><br><span class="hljs-string">let</span> <span class="hljs-string">arr</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-string">let</span> <span class="hljs-string">arr1</span> <span class="hljs-string">=</span> <span class="hljs-string">arr.entries()</span><br><span class="hljs-string">for</span> <span class="hljs-string">(let</span> <span class="hljs-string">e</span> <span class="hljs-string">of</span> <span class="hljs-string">arr1)</span> &#123;<br>    <span class="hljs-string">console.log(e);</span>   <span class="hljs-string">//</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>] [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>[].flat(n) 数组的扁平化 , ,n表示维度,n值为Infinity时维度为无限大</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]].flat(<span class="hljs-number">2</span>) <span class="hljs-comment">//[1,2,3]</span><br>[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]].flat(<span class="hljs-number">3</span>) <span class="hljs-comment">//[1,2,3,4,5]</span><br>[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]].toString()  <span class="hljs-comment">//&#x27;1,2,3,4,5&#x27;</span><br>[<span class="hljs-number">1</span>[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>[...]].flat(Infinity) <span class="hljs-comment">//[1,2,3,4...n]</span><br><br></code></pre></td></tr></table></figure>

<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h4 id="对象转数组"><a href="#对象转数组" class="headerlink" title="对象转数组"></a>对象转数组</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Object</span>.keys(&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, age: <span class="hljs-number">14</span> &#125;) //[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]<br><span class="hljs-keyword">Object</span>.<span class="hljs-keyword">values</span>(&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, age: <span class="hljs-number">14</span> &#125;) //[<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">14</span>]<br><span class="hljs-keyword">Object</span>.entries(&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>, age: <span class="hljs-number">14</span> &#125;) //[[<span class="hljs-type">name</span>,<span class="hljs-string">&#x27;张三&#x27;</span>],[age,<span class="hljs-number">14</span>]]<br><br></code></pre></td></tr></table></figure>

<h4 id="对象浅拷贝"><a href="#对象浅拷贝" class="headerlink" title="对象浅拷贝"></a>对象浅拷贝</h4><blockquote>
<p>深浅拷贝都是对于js中引用类型而言，浅拷贝是复制对象的引用<br>  简单类型 undefined / null / string / number /boolean 存在堆中直接引用， object / array 存在栈中，引用指针<br>  拷贝后的对象发生改变，原对象也发生改变</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>assign<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure>

<h4 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h4><blockquote>
<p>深拷贝是对对象的完全拷贝，不单只像浅拷贝一样复制引用，也复制值</p>
</blockquote>
<h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h5><blockquote>
<p>这种方法会抛弃对象的constructor，拷贝之后不会管对象原来的构造函数是什么，只能处理能够被json表示的数据结构</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">initalObj</span>) </span>&#123;<br>    　　<span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>    　　<span class="hljs-keyword">try</span> &#123;<br>       　　 obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(initalObj));<br>    　　&#125;<br>   　　 <span class="hljs-keyword">return</span> obj;<br>　　&#125;<br></code></pre></td></tr></table></figure>
<h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepCopy</span><span class="hljs-params">(p, c)</span> &#123;</span><br>　　var c = c || &#123;&#125;;<br>　　<span class="hljs-keyword">for</span> (var <span class="hljs-built_in">i</span> in p) &#123;<br>　　　　<span class="hljs-keyword">if</span> (typeof p[<span class="hljs-built_in">i</span>] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>　　　　　　c[<span class="hljs-built_in">i</span>] = (p[<span class="hljs-built_in">i</span>].constructor === Array) ? [] : &#123;&#125;;<br>　　　　　　deepCopy(p[<span class="hljs-built_in">i</span>], c[<span class="hljs-built_in">i</span>]);<br>　　　　&#125; <span class="hljs-keyword">else</span> &#123;<br>　　　　　　　c[<span class="hljs-built_in">i</span>] = p[<span class="hljs-built_in">i</span>];<br>　　　　&#125;<br>　　&#125;<br>　　<span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">initalObj</span>) </span>&#123;<br>    　　<span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>    　　<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> initalObj) &#123;<br>        　　<span class="hljs-keyword">var</span> prop = initalObj[i];<br>        　　<span class="hljs-comment">// 避免相互引用对象导致死循环</span><br>        　　<span class="hljs-keyword">if</span>(prop === obj) &#123;<br>           　　 <span class="hljs-keyword">continue</span>;<br>        　　&#125;<br>        　　<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> prop === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>            　　obj[i] = <span class="hljs-built_in">Object</span>.assign(prop);<br>       　　 &#125; <span class="hljs-keyword">else</span> &#123;<br>            　　obj[i] = prop;<br>        　　&#125;<br>    　　&#125;<br>    　　<span class="hljs-keyword">return</span> obj;<br>　　&#125;<br></code></pre></td></tr></table></figure>

<h4 id="对象转字符串"><a href="#对象转字符串" class="headerlink" title="对象转字符串"></a>对象转字符串</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">JSON.stringify()<br><br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br><br></code></pre></td></tr></table></figure>
<h4 id="其他对象方法"><a href="#其他对象方法" class="headerlink" title="其他对象方法"></a>其他对象方法</h4><blockquote>
<p>Object.assign(target,source1,source2,…) 将源对象source的所有可枚举属性合并到目标对象target上,此方法只拷贝源对象的自身属性，不拷贝继承的属性<br>  Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。同名属性会替换</p>
</blockquote>
<blockquote>
<p>Object.create(prototype[,propertiesObject]) 使用指定的原型对象及其属性去创建一个新的对象</p>
</blockquote>
<blockquote>
<p>Object.defineProperties(obj,props)<br>  直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p>
</blockquote>
<blockquote>
<p>Object.defineProperty()<br>  在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象</p>
</blockquote>
<blockquote>
<p>Object.keys(obj)<br>   返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。</p>
</blockquote>
<blockquote>
<p>Object.values()<br>  方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p>
</blockquote>
<blockquote>
<p>Object.entries()<br>  返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</p>
</blockquote>
<blockquote>
<p>hasOwnProperty()<br>  判断对象自身属性中是否具有指定的属性</p>
</blockquote>
<blockquote>
<p>Object.getOwnPropertyNames()<br>  返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><br>var obj = &#123;<br>    x : <span class="hljs-number">1</span>,<br>    y : <span class="hljs-number">2</span><br>&#125;<br> <br><span class="hljs-built_in">Object</span>.defineProperty(obj,<span class="hljs-string">&#x27;z&#x27;</span>,&#123;<br>    enumerable : <span class="hljs-literal">false</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj))  <span class="hljs-regexp">//</span> [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>] 包含不可枚举属性 。<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(obj))                 <span class="hljs-regexp">//</span> [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>]      只包含可枚举属性 。<br><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>Object.is() 判断两个值是否相同。</p>
</blockquote>
<blockquote>
<p>Object.freeze()<br>  冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，<br>  不能删除已有属性，该方法返回被冻结的对象。</p>
</blockquote>
<blockquote>
<p>Object.isFrozen()<br>  判断一个对象是否被冻结 </p>
</blockquote>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><blockquote>
<p>字符串翻转</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverseStr</span>(<span class="hljs-params">str = <span class="hljs-string">&quot;&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(<span class="hljs-string">&quot;&quot;</span>).reduceRight(<span class="hljs-function">(<span class="hljs-params">t, v</span>) =&gt;</span> t + v);<br>&#125;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;reduce&quot;</span>;<br><span class="hljs-built_in">console</span>.log(reverseStr(str)); <span class="hljs-comment">// &quot;ecuder&quot;</span><br><br></code></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf"><br>var <span class="hljs-built_in">name</span> = <span class="hljs-string">&quot;12345&quot;</span>;<br>var resultStr = <span class="hljs-built_in">name</span>.split(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">reverse</span>().<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;&#x27;</span>); <br><br>console.<span class="hljs-built_in">log</span>(resultStr);  <span class="hljs-comment">// 54321</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>url 参数序列化</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stringifyUrl</span>(<span class="hljs-params">search = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.entries(search).reduce(<br>    (t, v) =&gt; <span class="hljs-string">`<span class="hljs-subst">$&#123;t&#125;</span><span class="hljs-subst">$&#123;v[<span class="hljs-number">0</span>]&#125;</span>=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(v[<span class="hljs-number">1</span>])&#125;</span>&amp;`</span>,<br>    <span class="hljs-built_in">Object</span>.keys(search).length ? <span class="hljs-string">&quot;?&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>  ).replace(<span class="hljs-regexp">/&amp;$/</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(stringifyUrl(&#123; <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zyc&quot;</span> &#125;)); <span class="hljs-comment">// &quot;?age=27&amp;name=YZW&quot;</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * object转化成url拼接样式</span><br><span class="hljs-comment"> * @param obj 需要转化的参数</span><br><span class="hljs-comment"> */</span><br>const objToUrl =<span class="hljs-function"> <span class="hljs-params">obj</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-literal">[]</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>        <span class="hljs-keyword">if</span> (obj.has<span class="hljs-constructor">OwnProperty(<span class="hljs-params">i</span>)</span>) &#123;<br>            arr.push(encode<span class="hljs-constructor">URIComponent(<span class="hljs-params">i</span>)</span> + <span class="hljs-string">&quot;=&quot;</span> + encode<span class="hljs-constructor">URIComponent(<span class="hljs-params">obj</span>[<span class="hljs-params">i</span>])</span>);<br>        &#125;<br>    &#125;<br>    return arr.join(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>&#125;<br><span class="hljs-comment">//调用</span><br>obj<span class="hljs-constructor">ToUrl(&#123;<span class="hljs-params">name</span>:&#x27;<span class="hljs-params">zyc</span>&#x27;,<span class="hljs-params">age</span>:25&#125;)</span><br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>url 参数反序列化</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseUrlSearch</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> search = <span class="hljs-string">&#x27;?age=25&amp;name=zyc&#x27;</span>  <span class="hljs-comment">//window.localtion.search</span><br>  <span class="hljs-keyword">return</span> search.replace(<span class="hljs-regexp">/(^\?)|(&amp;$)/g</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;&amp;&quot;</span>).reduce(<span class="hljs-function">(<span class="hljs-params">t, v</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [key, val] = v.split(<span class="hljs-string">&quot;=&quot;</span>);<br>    t[key] = <span class="hljs-built_in">decodeURIComponent</span>(val);<br>    <span class="hljs-keyword">return</span> t;<br>  &#125;, &#123;&#125;);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(parseUrlSearch()); <span class="hljs-comment">// &#123; age: &quot;25&quot;, name: &quot;zyc&quot; &#125;</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight qml"><table><tr><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * url转化成object拼接样式</span><br><span class="hljs-comment"> * @param url 需要转化的参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> urlToObj = <span class="hljs-built_in">url</span> =&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">string</span> = <span class="hljs-built_in">url</span>.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>    <span class="hljs-keyword">let</span> res = &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">string</span>.length;i++)&#123;<br>        <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">string</span>[i].split(<span class="hljs-string">&#x27;=&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            res[str[<span class="hljs-number">0</span>]]=str[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//调用</span><br>urlToObj(<span class="hljs-string">&quot;name=zyc&amp;age=25&quot;</span>)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>数字千分位</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1234567890&#x27;</span>.replace(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&quot;,&quot;</span>))<br><span class="hljs-built_in">console</span>.log((<span class="hljs-number">1234567890</span>).toLocaleString())<br><br></code></pre></td></tr></table></figure>

<h6 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h6>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
